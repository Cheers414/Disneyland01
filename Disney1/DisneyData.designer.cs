#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Disney1
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ShanghaiDisneyland01")]
	public partial class DisneyDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertTrafficMethod(TrafficMethod instance);
    partial void UpdateTrafficMethod(TrafficMethod instance);
    partial void DeleteTrafficMethod(TrafficMethod instance);
    partial void InsertAttractions(Attractions instance);
    partial void UpdateAttractions(Attractions instance);
    partial void DeleteAttractions(Attractions instance);
    partial void InsertAuthority(Authority instance);
    partial void UpdateAuthority(Authority instance);
    partial void DeleteAuthority(Authority instance);
    partial void InsertAuthorityDetail(AuthorityDetail instance);
    partial void UpdateAuthorityDetail(AuthorityDetail instance);
    partial void DeleteAuthorityDetail(AuthorityDetail instance);
    partial void InsertBusinessSchedule(BusinessSchedule instance);
    partial void UpdateBusinessSchedule(BusinessSchedule instance);
    partial void DeleteBusinessSchedule(BusinessSchedule instance);
    partial void InsertCarouselText(CarouselText instance);
    partial void UpdateCarouselText(CarouselText instance);
    partial void DeleteCarouselText(CarouselText instance);
    partial void InsertCheckInRecord(CheckInRecord instance);
    partial void UpdateCheckInRecord(CheckInRecord instance);
    partial void DeleteCheckInRecord(CheckInRecord instance);
    partial void InsertCoupon(Coupon instance);
    partial void UpdateCoupon(Coupon instance);
    partial void DeleteCoupon(Coupon instance);
    partial void InsertDramaSchedule(DramaSchedule instance);
    partial void UpdateDramaSchedule(DramaSchedule instance);
    partial void DeleteDramaSchedule(DramaSchedule instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertGuest(Guest instance);
    partial void UpdateGuest(Guest instance);
    partial void DeleteGuest(Guest instance);
    partial void InsertHolidayEvent(HolidayEvent instance);
    partial void UpdateHolidayEvent(HolidayEvent instance);
    partial void DeleteHolidayEvent(HolidayEvent instance);
    partial void InsertHotel(Hotel instance);
    partial void UpdateHotel(Hotel instance);
    partial void DeleteHotel(Hotel instance);
    partial void InsertLogRecord(LogRecord instance);
    partial void UpdateLogRecord(LogRecord instance);
    partial void DeleteLogRecord(LogRecord instance);
    partial void InsertMaintenanceSchedule(MaintenanceSchedule instance);
    partial void UpdateMaintenanceSchedule(MaintenanceSchedule instance);
    partial void DeleteMaintenanceSchedule(MaintenanceSchedule instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertPaymentMethod(PaymentMethod instance);
    partial void UpdatePaymentMethod(PaymentMethod instance);
    partial void DeletePaymentMethod(PaymentMethod instance);
    partial void InsertQueueRecord(QueueRecord instance);
    partial void UpdateQueueRecord(QueueRecord instance);
    partial void DeleteQueueRecord(QueueRecord instance);
    partial void InsertRoom(Room instance);
    partial void UpdateRoom(Room instance);
    partial void DeleteRoom(Room instance);
    partial void InsertRoomAttributes(RoomAttributes instance);
    partial void UpdateRoomAttributes(RoomAttributes instance);
    partial void DeleteRoomAttributes(RoomAttributes instance);
    partial void InsertRoomAttributesDetail(RoomAttributesDetail instance);
    partial void UpdateRoomAttributesDetail(RoomAttributesDetail instance);
    partial void DeleteRoomAttributesDetail(RoomAttributesDetail instance);
    partial void InsertRoomOrder(RoomOrder instance);
    partial void UpdateRoomOrder(RoomOrder instance);
    partial void DeleteRoomOrder(RoomOrder instance);
    partial void InsertRoomOrderDetail(RoomOrderDetail instance);
    partial void UpdateRoomOrderDetail(RoomOrderDetail instance);
    partial void DeleteRoomOrderDetail(RoomOrderDetail instance);
    partial void InsertRoomSeries(RoomSeries instance);
    partial void UpdateRoomSeries(RoomSeries instance);
    partial void DeleteRoomSeries(RoomSeries instance);
    partial void InsertRoomService(RoomService instance);
    partial void UpdateRoomService(RoomService instance);
    partial void DeleteRoomService(RoomService instance);
    partial void InsertRoomServiceRecord(RoomServiceRecord instance);
    partial void UpdateRoomServiceRecord(RoomServiceRecord instance);
    partial void DeleteRoomServiceRecord(RoomServiceRecord instance);
    partial void InsertRoomStatus(RoomStatus instance);
    partial void UpdateRoomStatus(RoomStatus instance);
    partial void DeleteRoomStatus(RoomStatus instance);
    partial void InsertSuitesLevel(SuitesLevel instance);
    partial void UpdateSuitesLevel(SuitesLevel instance);
    partial void DeleteSuitesLevel(SuitesLevel instance);
    partial void InsertThemePark(ThemePark instance);
    partial void UpdateThemePark(ThemePark instance);
    partial void DeleteThemePark(ThemePark instance);
    partial void InsertTicket(Ticket instance);
    partial void UpdateTicket(Ticket instance);
    partial void DeleteTicket(Ticket instance);
    partial void InsertTicketOffer(TicketOffer instance);
    partial void UpdateTicketOffer(TicketOffer instance);
    partial void DeleteTicketOffer(TicketOffer instance);
    #endregion
		
		public DisneyDataDataContext() : 
				base(global::Disney1.Properties.Settings.Default.ShanghaiDisneyland01ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DisneyDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DisneyDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DisneyDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DisneyDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Account
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<TrafficMethod> TrafficMethod
		{
			get
			{
				return this.GetTable<TrafficMethod>();
			}
		}
		
		public System.Data.Linq.Table<Attractions> Attractions
		{
			get
			{
				return this.GetTable<Attractions>();
			}
		}
		
		public System.Data.Linq.Table<Authority> Authority
		{
			get
			{
				return this.GetTable<Authority>();
			}
		}
		
		public System.Data.Linq.Table<AuthorityDetail> AuthorityDetail
		{
			get
			{
				return this.GetTable<AuthorityDetail>();
			}
		}
		
		public System.Data.Linq.Table<BusinessSchedule> BusinessSchedule
		{
			get
			{
				return this.GetTable<BusinessSchedule>();
			}
		}
		
		public System.Data.Linq.Table<CarouselText> CarouselText
		{
			get
			{
				return this.GetTable<CarouselText>();
			}
		}
		
		public System.Data.Linq.Table<CheckInRecord> CheckInRecord
		{
			get
			{
				return this.GetTable<CheckInRecord>();
			}
		}
		
		public System.Data.Linq.Table<Coupon> Coupon
		{
			get
			{
				return this.GetTable<Coupon>();
			}
		}
		
		public System.Data.Linq.Table<DramaSchedule> DramaSchedule
		{
			get
			{
				return this.GetTable<DramaSchedule>();
			}
		}
		
		public System.Data.Linq.Table<Group> Group
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<Guest> Guest
		{
			get
			{
				return this.GetTable<Guest>();
			}
		}
		
		public System.Data.Linq.Table<HolidayEvent> HolidayEvent
		{
			get
			{
				return this.GetTable<HolidayEvent>();
			}
		}
		
		public System.Data.Linq.Table<Hotel> Hotel
		{
			get
			{
				return this.GetTable<Hotel>();
			}
		}
		
		public System.Data.Linq.Table<LogRecord> LogRecord
		{
			get
			{
				return this.GetTable<LogRecord>();
			}
		}
		
		public System.Data.Linq.Table<MaintenanceSchedule> MaintenanceSchedule
		{
			get
			{
				return this.GetTable<MaintenanceSchedule>();
			}
		}
		
		public System.Data.Linq.Table<Order> Order
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<PaymentMethod> PaymentMethod
		{
			get
			{
				return this.GetTable<PaymentMethod>();
			}
		}
		
		public System.Data.Linq.Table<QueueRecord> QueueRecord
		{
			get
			{
				return this.GetTable<QueueRecord>();
			}
		}
		
		public System.Data.Linq.Table<Room> Room
		{
			get
			{
				return this.GetTable<Room>();
			}
		}
		
		public System.Data.Linq.Table<RoomAttributes> RoomAttributes
		{
			get
			{
				return this.GetTable<RoomAttributes>();
			}
		}
		
		public System.Data.Linq.Table<RoomAttributesDetail> RoomAttributesDetail
		{
			get
			{
				return this.GetTable<RoomAttributesDetail>();
			}
		}
		
		public System.Data.Linq.Table<RoomOrder> RoomOrder
		{
			get
			{
				return this.GetTable<RoomOrder>();
			}
		}
		
		public System.Data.Linq.Table<RoomOrderDetail> RoomOrderDetail
		{
			get
			{
				return this.GetTable<RoomOrderDetail>();
			}
		}
		
		public System.Data.Linq.Table<RoomSeries> RoomSeries
		{
			get
			{
				return this.GetTable<RoomSeries>();
			}
		}
		
		public System.Data.Linq.Table<RoomService> RoomService
		{
			get
			{
				return this.GetTable<RoomService>();
			}
		}
		
		public System.Data.Linq.Table<RoomServiceRecord> RoomServiceRecord
		{
			get
			{
				return this.GetTable<RoomServiceRecord>();
			}
		}
		
		public System.Data.Linq.Table<RoomStatus> RoomStatus
		{
			get
			{
				return this.GetTable<RoomStatus>();
			}
		}
		
		public System.Data.Linq.Table<SuitesLevel> SuitesLevel
		{
			get
			{
				return this.GetTable<SuitesLevel>();
			}
		}
		
		public System.Data.Linq.Table<ThemePark> ThemePark
		{
			get
			{
				return this.GetTable<ThemePark>();
			}
		}
		
		public System.Data.Linq.Table<Ticket> Ticket
		{
			get
			{
				return this.GetTable<Ticket>();
			}
		}
		
		public System.Data.Linq.Table<TicketOffer> TicketOffer
		{
			get
			{
				return this.GetTable<TicketOffer>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AccountId;
		
		private string _Password;
		
		private string _Name;
		
		private System.DateTime _Birthday;
		
		private string _Gender;
		
		private string _Citizenship;
		
		private string _Email;
		
		private int _GroupNo;
		
		private System.DateTime _LastTimeChangePwd;
		
		private EntitySet<LogRecord> _LogRecord;
		
		private EntitySet<Order> _Order;
		
		private EntityRef<Group> _Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountIdChanging(string value);
    partial void OnAccountIdChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBirthdayChanging(System.DateTime value);
    partial void OnBirthdayChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnCitizenshipChanging(string value);
    partial void OnCitizenshipChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnGroupNoChanging(int value);
    partial void OnGroupNoChanged();
    partial void OnLastTimeChangePwdChanging(System.DateTime value);
    partial void OnLastTimeChangePwdChanged();
    #endregion
		
		public Account()
		{
			this._LogRecord = new EntitySet<LogRecord>(new Action<LogRecord>(this.attach_LogRecord), new Action<LogRecord>(this.detach_LogRecord));
			this._Order = new EntitySet<Order>(new Action<Order>(this.attach_Order), new Action<Order>(this.detach_Order));
			this._Group = default(EntityRef<Group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthday", DbType="Date NOT NULL")]
		public System.DateTime Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Citizenship", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Citizenship
		{
			get
			{
				return this._Citizenship;
			}
			set
			{
				if ((this._Citizenship != value))
				{
					this.OnCitizenshipChanging(value);
					this.SendPropertyChanging();
					this._Citizenship = value;
					this.SendPropertyChanged("Citizenship");
					this.OnCitizenshipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupNo", DbType="Int NOT NULL")]
		public int GroupNo
		{
			get
			{
				return this._GroupNo;
			}
			set
			{
				if ((this._GroupNo != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupNoChanging(value);
					this.SendPropertyChanging();
					this._GroupNo = value;
					this.SendPropertyChanged("GroupNo");
					this.OnGroupNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastTimeChangePwd", DbType="Date NOT NULL")]
		public System.DateTime LastTimeChangePwd
		{
			get
			{
				return this._LastTimeChangePwd;
			}
			set
			{
				if ((this._LastTimeChangePwd != value))
				{
					this.OnLastTimeChangePwdChanging(value);
					this.SendPropertyChanging();
					this._LastTimeChangePwd = value;
					this.SendPropertyChanged("LastTimeChangePwd");
					this.OnLastTimeChangePwdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_LogRecord", Storage="_LogRecord", ThisKey="AccountId", OtherKey="AccountId")]
		public EntitySet<LogRecord> LogRecord
		{
			get
			{
				return this._LogRecord;
			}
			set
			{
				this._LogRecord.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Order", Storage="_Order", ThisKey="AccountId", OtherKey="AccountId")]
		public EntitySet<Order> Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				this._Order.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Account", Storage="_Group", ThisKey="GroupNo", OtherKey="GroupNo", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.Account.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.Account.Add(this);
						this._GroupNo = value.GroupNo;
					}
					else
					{
						this._GroupNo = default(int);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LogRecord(LogRecord entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_LogRecord(LogRecord entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Order(Order entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Order(Order entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TrafficMethod")]
	public partial class TrafficMethod : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TrafficMethodNo;
		
		private string _Method;
		
		private string _TrafficContent;
		
		private string _Photo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTrafficMethodNoChanging(int value);
    partial void OnTrafficMethodNoChanged();
    partial void OnMethodChanging(string value);
    partial void OnMethodChanged();
    partial void OnTrafficContentChanging(string value);
    partial void OnTrafficContentChanged();
    partial void OnPhotoChanging(string value);
    partial void OnPhotoChanged();
    #endregion
		
		public TrafficMethod()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrafficMethodNo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TrafficMethodNo
		{
			get
			{
				return this._TrafficMethodNo;
			}
			set
			{
				if ((this._TrafficMethodNo != value))
				{
					this.OnTrafficMethodNoChanging(value);
					this.SendPropertyChanging();
					this._TrafficMethodNo = value;
					this.SendPropertyChanged("TrafficMethodNo");
					this.OnTrafficMethodNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Method", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Method
		{
			get
			{
				return this._Method;
			}
			set
			{
				if ((this._Method != value))
				{
					this.OnMethodChanging(value);
					this.SendPropertyChanging();
					this._Method = value;
					this.SendPropertyChanged("Method");
					this.OnMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrafficContent", DbType="NVarChar(3000) NOT NULL", CanBeNull=false)]
		public string TrafficContent
		{
			get
			{
				return this._TrafficContent;
			}
			set
			{
				if ((this._TrafficContent != value))
				{
					this.OnTrafficContentChanging(value);
					this.SendPropertyChanging();
					this._TrafficContent = value;
					this.SendPropertyChanged("TrafficContent");
					this.OnTrafficContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo", DbType="NVarChar(100)")]
		public string Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Attractions")]
	public partial class Attractions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AttractionsNo;
		
		private int _ThemeParkNo;
		
		private string _AttractionsName;
		
		private System.Nullable<int> _MainAttractionsNo;
		
		private int _TimeSpenSeconds;
		
		private int _BatchConsumption;
		
		private string _Features;
		
		private string _SuitableFor;
		
		private bool _isFastPassage;
		
		private bool _isParentChild;
		
		private bool _isStageDrama;
		
		private string _Photo;
		
		private EntitySet<BusinessSchedule> _BusinessSchedule;
		
		private EntitySet<DramaSchedule> _DramaSchedule;
		
		private EntitySet<MaintenanceSchedule> _MaintenanceSchedule;
		
		private EntitySet<QueueRecord> _QueueRecord;
		
		private EntityRef<ThemePark> _ThemePark;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAttractionsNoChanging(int value);
    partial void OnAttractionsNoChanged();
    partial void OnThemeParkNoChanging(int value);
    partial void OnThemeParkNoChanged();
    partial void OnAttractionsNameChanging(string value);
    partial void OnAttractionsNameChanged();
    partial void OnMainAttractionsNoChanging(System.Nullable<int> value);
    partial void OnMainAttractionsNoChanged();
    partial void OnTimeSpenSecondsChanging(int value);
    partial void OnTimeSpenSecondsChanged();
    partial void OnBatchConsumptionChanging(int value);
    partial void OnBatchConsumptionChanged();
    partial void OnFeaturesChanging(string value);
    partial void OnFeaturesChanged();
    partial void OnSuitableForChanging(string value);
    partial void OnSuitableForChanged();
    partial void OnisFastPassageChanging(bool value);
    partial void OnisFastPassageChanged();
    partial void OnisParentChildChanging(bool value);
    partial void OnisParentChildChanged();
    partial void OnisStageDramaChanging(bool value);
    partial void OnisStageDramaChanged();
    partial void OnPhotoChanging(string value);
    partial void OnPhotoChanged();
    #endregion
		
		public Attractions()
		{
			this._BusinessSchedule = new EntitySet<BusinessSchedule>(new Action<BusinessSchedule>(this.attach_BusinessSchedule), new Action<BusinessSchedule>(this.detach_BusinessSchedule));
			this._DramaSchedule = new EntitySet<DramaSchedule>(new Action<DramaSchedule>(this.attach_DramaSchedule), new Action<DramaSchedule>(this.detach_DramaSchedule));
			this._MaintenanceSchedule = new EntitySet<MaintenanceSchedule>(new Action<MaintenanceSchedule>(this.attach_MaintenanceSchedule), new Action<MaintenanceSchedule>(this.detach_MaintenanceSchedule));
			this._QueueRecord = new EntitySet<QueueRecord>(new Action<QueueRecord>(this.attach_QueueRecord), new Action<QueueRecord>(this.detach_QueueRecord));
			this._ThemePark = default(EntityRef<ThemePark>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttractionsNo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AttractionsNo
		{
			get
			{
				return this._AttractionsNo;
			}
			set
			{
				if ((this._AttractionsNo != value))
				{
					this.OnAttractionsNoChanging(value);
					this.SendPropertyChanging();
					this._AttractionsNo = value;
					this.SendPropertyChanged("AttractionsNo");
					this.OnAttractionsNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThemeParkNo", DbType="Int NOT NULL")]
		public int ThemeParkNo
		{
			get
			{
				return this._ThemeParkNo;
			}
			set
			{
				if ((this._ThemeParkNo != value))
				{
					if (this._ThemePark.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnThemeParkNoChanging(value);
					this.SendPropertyChanging();
					this._ThemeParkNo = value;
					this.SendPropertyChanged("ThemeParkNo");
					this.OnThemeParkNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttractionsName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string AttractionsName
		{
			get
			{
				return this._AttractionsName;
			}
			set
			{
				if ((this._AttractionsName != value))
				{
					this.OnAttractionsNameChanging(value);
					this.SendPropertyChanging();
					this._AttractionsName = value;
					this.SendPropertyChanged("AttractionsName");
					this.OnAttractionsNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MainAttractionsNo", DbType="Int")]
		public System.Nullable<int> MainAttractionsNo
		{
			get
			{
				return this._MainAttractionsNo;
			}
			set
			{
				if ((this._MainAttractionsNo != value))
				{
					this.OnMainAttractionsNoChanging(value);
					this.SendPropertyChanging();
					this._MainAttractionsNo = value;
					this.SendPropertyChanged("MainAttractionsNo");
					this.OnMainAttractionsNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeSpenSeconds", DbType="Int NOT NULL")]
		public int TimeSpenSeconds
		{
			get
			{
				return this._TimeSpenSeconds;
			}
			set
			{
				if ((this._TimeSpenSeconds != value))
				{
					this.OnTimeSpenSecondsChanging(value);
					this.SendPropertyChanging();
					this._TimeSpenSeconds = value;
					this.SendPropertyChanged("TimeSpenSeconds");
					this.OnTimeSpenSecondsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BatchConsumption", DbType="Int NOT NULL")]
		public int BatchConsumption
		{
			get
			{
				return this._BatchConsumption;
			}
			set
			{
				if ((this._BatchConsumption != value))
				{
					this.OnBatchConsumptionChanging(value);
					this.SendPropertyChanging();
					this._BatchConsumption = value;
					this.SendPropertyChanged("BatchConsumption");
					this.OnBatchConsumptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Features", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Features
		{
			get
			{
				return this._Features;
			}
			set
			{
				if ((this._Features != value))
				{
					this.OnFeaturesChanging(value);
					this.SendPropertyChanging();
					this._Features = value;
					this.SendPropertyChanged("Features");
					this.OnFeaturesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SuitableFor", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string SuitableFor
		{
			get
			{
				return this._SuitableFor;
			}
			set
			{
				if ((this._SuitableFor != value))
				{
					this.OnSuitableForChanging(value);
					this.SendPropertyChanging();
					this._SuitableFor = value;
					this.SendPropertyChanged("SuitableFor");
					this.OnSuitableForChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isFastPassage", DbType="Bit NOT NULL")]
		public bool isFastPassage
		{
			get
			{
				return this._isFastPassage;
			}
			set
			{
				if ((this._isFastPassage != value))
				{
					this.OnisFastPassageChanging(value);
					this.SendPropertyChanging();
					this._isFastPassage = value;
					this.SendPropertyChanged("isFastPassage");
					this.OnisFastPassageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isParentChild", DbType="Bit NOT NULL")]
		public bool isParentChild
		{
			get
			{
				return this._isParentChild;
			}
			set
			{
				if ((this._isParentChild != value))
				{
					this.OnisParentChildChanging(value);
					this.SendPropertyChanging();
					this._isParentChild = value;
					this.SendPropertyChanged("isParentChild");
					this.OnisParentChildChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isStageDrama", DbType="Bit NOT NULL")]
		public bool isStageDrama
		{
			get
			{
				return this._isStageDrama;
			}
			set
			{
				if ((this._isStageDrama != value))
				{
					this.OnisStageDramaChanging(value);
					this.SendPropertyChanging();
					this._isStageDrama = value;
					this.SendPropertyChanged("isStageDrama");
					this.OnisStageDramaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo", DbType="NVarChar(100)")]
		public string Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attractions_BusinessSchedule", Storage="_BusinessSchedule", ThisKey="AttractionsNo", OtherKey="AttractionsNo")]
		public EntitySet<BusinessSchedule> BusinessSchedule
		{
			get
			{
				return this._BusinessSchedule;
			}
			set
			{
				this._BusinessSchedule.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attractions_DramaSchedule", Storage="_DramaSchedule", ThisKey="AttractionsNo", OtherKey="AttractionsNo")]
		public EntitySet<DramaSchedule> DramaSchedule
		{
			get
			{
				return this._DramaSchedule;
			}
			set
			{
				this._DramaSchedule.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attractions_MaintenanceSchedule", Storage="_MaintenanceSchedule", ThisKey="AttractionsNo", OtherKey="AttractionsNo")]
		public EntitySet<MaintenanceSchedule> MaintenanceSchedule
		{
			get
			{
				return this._MaintenanceSchedule;
			}
			set
			{
				this._MaintenanceSchedule.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attractions_QueueRecord", Storage="_QueueRecord", ThisKey="AttractionsNo", OtherKey="AttractionsNo")]
		public EntitySet<QueueRecord> QueueRecord
		{
			get
			{
				return this._QueueRecord;
			}
			set
			{
				this._QueueRecord.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThemePark_Attractions", Storage="_ThemePark", ThisKey="ThemeParkNo", OtherKey="ThemeParkNo", IsForeignKey=true)]
		public ThemePark ThemePark
		{
			get
			{
				return this._ThemePark.Entity;
			}
			set
			{
				ThemePark previousValue = this._ThemePark.Entity;
				if (((previousValue != value) 
							|| (this._ThemePark.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ThemePark.Entity = null;
						previousValue.Attractions.Remove(this);
					}
					this._ThemePark.Entity = value;
					if ((value != null))
					{
						value.Attractions.Add(this);
						this._ThemeParkNo = value.ThemeParkNo;
					}
					else
					{
						this._ThemeParkNo = default(int);
					}
					this.SendPropertyChanged("ThemePark");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BusinessSchedule(BusinessSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Attractions = this;
		}
		
		private void detach_BusinessSchedule(BusinessSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Attractions = null;
		}
		
		private void attach_DramaSchedule(DramaSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Attractions = this;
		}
		
		private void detach_DramaSchedule(DramaSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Attractions = null;
		}
		
		private void attach_MaintenanceSchedule(MaintenanceSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Attractions = this;
		}
		
		private void detach_MaintenanceSchedule(MaintenanceSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Attractions = null;
		}
		
		private void attach_QueueRecord(QueueRecord entity)
		{
			this.SendPropertyChanging();
			entity.Attractions = this;
		}
		
		private void detach_QueueRecord(QueueRecord entity)
		{
			this.SendPropertyChanging();
			entity.Attractions = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Authority")]
	public partial class Authority : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AuthorityNo;
		
		private string _Event;
		
		private EntitySet<AuthorityDetail> _AuthorityDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorityNoChanging(int value);
    partial void OnAuthorityNoChanged();
    partial void OnEventChanging(string value);
    partial void OnEventChanged();
    #endregion
		
		public Authority()
		{
			this._AuthorityDetail = new EntitySet<AuthorityDetail>(new Action<AuthorityDetail>(this.attach_AuthorityDetail), new Action<AuthorityDetail>(this.detach_AuthorityDetail));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorityNo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AuthorityNo
		{
			get
			{
				return this._AuthorityNo;
			}
			set
			{
				if ((this._AuthorityNo != value))
				{
					this.OnAuthorityNoChanging(value);
					this.SendPropertyChanging();
					this._AuthorityNo = value;
					this.SendPropertyChanged("AuthorityNo");
					this.OnAuthorityNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Event", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Event
		{
			get
			{
				return this._Event;
			}
			set
			{
				if ((this._Event != value))
				{
					this.OnEventChanging(value);
					this.SendPropertyChanging();
					this._Event = value;
					this.SendPropertyChanged("Event");
					this.OnEventChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Authority_AuthorityDetail", Storage="_AuthorityDetail", ThisKey="AuthorityNo", OtherKey="AuthorityNo")]
		public EntitySet<AuthorityDetail> AuthorityDetail
		{
			get
			{
				return this._AuthorityDetail;
			}
			set
			{
				this._AuthorityDetail.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AuthorityDetail(AuthorityDetail entity)
		{
			this.SendPropertyChanging();
			entity.Authority = this;
		}
		
		private void detach_AuthorityDetail(AuthorityDetail entity)
		{
			this.SendPropertyChanging();
			entity.Authority = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AuthorityDetail")]
	public partial class AuthorityDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AuthorityDetailNo;
		
		private int _GroupNo;
		
		private int _AuthorityNo;
		
		private bool _isAllow;
		
		private EntityRef<Authority> _Authority;
		
		private EntityRef<Group> _Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorityDetailNoChanging(int value);
    partial void OnAuthorityDetailNoChanged();
    partial void OnGroupNoChanging(int value);
    partial void OnGroupNoChanged();
    partial void OnAuthorityNoChanging(int value);
    partial void OnAuthorityNoChanged();
    partial void OnisAllowChanging(bool value);
    partial void OnisAllowChanged();
    #endregion
		
		public AuthorityDetail()
		{
			this._Authority = default(EntityRef<Authority>);
			this._Group = default(EntityRef<Group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorityDetailNo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AuthorityDetailNo
		{
			get
			{
				return this._AuthorityDetailNo;
			}
			set
			{
				if ((this._AuthorityDetailNo != value))
				{
					this.OnAuthorityDetailNoChanging(value);
					this.SendPropertyChanging();
					this._AuthorityDetailNo = value;
					this.SendPropertyChanged("AuthorityDetailNo");
					this.OnAuthorityDetailNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupNo", DbType="Int NOT NULL")]
		public int GroupNo
		{
			get
			{
				return this._GroupNo;
			}
			set
			{
				if ((this._GroupNo != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupNoChanging(value);
					this.SendPropertyChanging();
					this._GroupNo = value;
					this.SendPropertyChanged("GroupNo");
					this.OnGroupNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorityNo", DbType="Int NOT NULL")]
		public int AuthorityNo
		{
			get
			{
				return this._AuthorityNo;
			}
			set
			{
				if ((this._AuthorityNo != value))
				{
					if (this._Authority.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorityNoChanging(value);
					this.SendPropertyChanging();
					this._AuthorityNo = value;
					this.SendPropertyChanged("AuthorityNo");
					this.OnAuthorityNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isAllow", DbType="Bit NOT NULL")]
		public bool isAllow
		{
			get
			{
				return this._isAllow;
			}
			set
			{
				if ((this._isAllow != value))
				{
					this.OnisAllowChanging(value);
					this.SendPropertyChanging();
					this._isAllow = value;
					this.SendPropertyChanged("isAllow");
					this.OnisAllowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Authority_AuthorityDetail", Storage="_Authority", ThisKey="AuthorityNo", OtherKey="AuthorityNo", IsForeignKey=true)]
		public Authority Authority
		{
			get
			{
				return this._Authority.Entity;
			}
			set
			{
				Authority previousValue = this._Authority.Entity;
				if (((previousValue != value) 
							|| (this._Authority.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Authority.Entity = null;
						previousValue.AuthorityDetail.Remove(this);
					}
					this._Authority.Entity = value;
					if ((value != null))
					{
						value.AuthorityDetail.Add(this);
						this._AuthorityNo = value.AuthorityNo;
					}
					else
					{
						this._AuthorityNo = default(int);
					}
					this.SendPropertyChanged("Authority");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_AuthorityDetail", Storage="_Group", ThisKey="GroupNo", OtherKey="GroupNo", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.AuthorityDetail.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.AuthorityDetail.Add(this);
						this._GroupNo = value.GroupNo;
					}
					else
					{
						this._GroupNo = default(int);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BusinessSchedule")]
	public partial class BusinessSchedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BusinessScheduleNo;
		
		private System.DateTime _BusinessDate;
		
		private int _AttractionsNo;
		
		private System.Nullable<System.TimeSpan> _StartTime;
		
		private System.Nullable<System.TimeSpan> _EndTime;
		
		private string _DateType;
		
		private EntityRef<Attractions> _Attractions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBusinessScheduleNoChanging(int value);
    partial void OnBusinessScheduleNoChanged();
    partial void OnBusinessDateChanging(System.DateTime value);
    partial void OnBusinessDateChanged();
    partial void OnAttractionsNoChanging(int value);
    partial void OnAttractionsNoChanged();
    partial void OnStartTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnEndTimeChanged();
    partial void OnDateTypeChanging(string value);
    partial void OnDateTypeChanged();
    #endregion
		
		public BusinessSchedule()
		{
			this._Attractions = default(EntityRef<Attractions>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessScheduleNo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BusinessScheduleNo
		{
			get
			{
				return this._BusinessScheduleNo;
			}
			set
			{
				if ((this._BusinessScheduleNo != value))
				{
					this.OnBusinessScheduleNoChanging(value);
					this.SendPropertyChanging();
					this._BusinessScheduleNo = value;
					this.SendPropertyChanged("BusinessScheduleNo");
					this.OnBusinessScheduleNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessDate", DbType="Date NOT NULL")]
		public System.DateTime BusinessDate
		{
			get
			{
				return this._BusinessDate;
			}
			set
			{
				if ((this._BusinessDate != value))
				{
					this.OnBusinessDateChanging(value);
					this.SendPropertyChanging();
					this._BusinessDate = value;
					this.SendPropertyChanged("BusinessDate");
					this.OnBusinessDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttractionsNo", DbType="Int NOT NULL")]
		public int AttractionsNo
		{
			get
			{
				return this._AttractionsNo;
			}
			set
			{
				if ((this._AttractionsNo != value))
				{
					if (this._Attractions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttractionsNoChanging(value);
					this.SendPropertyChanging();
					this._AttractionsNo = value;
					this.SendPropertyChanged("AttractionsNo");
					this.OnAttractionsNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateType", DbType="NVarChar(10)")]
		public string DateType
		{
			get
			{
				return this._DateType;
			}
			set
			{
				if ((this._DateType != value))
				{
					this.OnDateTypeChanging(value);
					this.SendPropertyChanging();
					this._DateType = value;
					this.SendPropertyChanged("DateType");
					this.OnDateTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attractions_BusinessSchedule", Storage="_Attractions", ThisKey="AttractionsNo", OtherKey="AttractionsNo", IsForeignKey=true)]
		public Attractions Attractions
		{
			get
			{
				return this._Attractions.Entity;
			}
			set
			{
				Attractions previousValue = this._Attractions.Entity;
				if (((previousValue != value) 
							|| (this._Attractions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Attractions.Entity = null;
						previousValue.BusinessSchedule.Remove(this);
					}
					this._Attractions.Entity = value;
					if ((value != null))
					{
						value.BusinessSchedule.Add(this);
						this._AttractionsNo = value.AttractionsNo;
					}
					else
					{
						this._AttractionsNo = default(int);
					}
					this.SendPropertyChanged("Attractions");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CarouselText")]
	public partial class CarouselText : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CarouselNo;
		
		private string _CarouselText1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCarouselNoChanging(int value);
    partial void OnCarouselNoChanged();
    partial void OnCarouselText1Changing(string value);
    partial void OnCarouselText1Changed();
    #endregion
		
		public CarouselText()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarouselNo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CarouselNo
		{
			get
			{
				return this._CarouselNo;
			}
			set
			{
				if ((this._CarouselNo != value))
				{
					this.OnCarouselNoChanging(value);
					this.SendPropertyChanging();
					this._CarouselNo = value;
					this.SendPropertyChanged("CarouselNo");
					this.OnCarouselNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="CarouselText", Storage="_CarouselText1", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string CarouselText1
		{
			get
			{
				return this._CarouselText1;
			}
			set
			{
				if ((this._CarouselText1 != value))
				{
					this.OnCarouselText1Changing(value);
					this.SendPropertyChanging();
					this._CarouselText1 = value;
					this.SendPropertyChanged("CarouselText1");
					this.OnCarouselText1Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CheckInRecord")]
	public partial class CheckInRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CheckInRecordNo;
		
		private int _RoomOrderNo;
		
		private System.Nullable<System.DateTime> _CheckInDateTime;
		
		private System.Nullable<System.DateTime> _CheckOutDateTime;
		
		private string _Note;
		
		private EntityRef<RoomOrder> _RoomOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCheckInRecordNoChanging(int value);
    partial void OnCheckInRecordNoChanged();
    partial void OnRoomOrderNoChanging(int value);
    partial void OnRoomOrderNoChanged();
    partial void OnCheckInDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCheckInDateTimeChanged();
    partial void OnCheckOutDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCheckOutDateTimeChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public CheckInRecord()
		{
			this._RoomOrder = default(EntityRef<RoomOrder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckInRecordNo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CheckInRecordNo
		{
			get
			{
				return this._CheckInRecordNo;
			}
			set
			{
				if ((this._CheckInRecordNo != value))
				{
					this.OnCheckInRecordNoChanging(value);
					this.SendPropertyChanging();
					this._CheckInRecordNo = value;
					this.SendPropertyChanged("CheckInRecordNo");
					this.OnCheckInRecordNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomOrderNo", DbType="Int NOT NULL")]
		public int RoomOrderNo
		{
			get
			{
				return this._RoomOrderNo;
			}
			set
			{
				if ((this._RoomOrderNo != value))
				{
					if (this._RoomOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomOrderNoChanging(value);
					this.SendPropertyChanging();
					this._RoomOrderNo = value;
					this.SendPropertyChanged("RoomOrderNo");
					this.OnRoomOrderNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckInDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CheckInDateTime
		{
			get
			{
				return this._CheckInDateTime;
			}
			set
			{
				if ((this._CheckInDateTime != value))
				{
					this.OnCheckInDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CheckInDateTime = value;
					this.SendPropertyChanged("CheckInDateTime");
					this.OnCheckInDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckOutDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CheckOutDateTime
		{
			get
			{
				return this._CheckOutDateTime;
			}
			set
			{
				if ((this._CheckOutDateTime != value))
				{
					this.OnCheckOutDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CheckOutDateTime = value;
					this.SendPropertyChanged("CheckOutDateTime");
					this.OnCheckOutDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(200)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoomOrder_CheckInRecord", Storage="_RoomOrder", ThisKey="RoomOrderNo", OtherKey="RoomOrderNo", IsForeignKey=true)]
		public RoomOrder RoomOrder
		{
			get
			{
				return this._RoomOrder.Entity;
			}
			set
			{
				RoomOrder previousValue = this._RoomOrder.Entity;
				if (((previousValue != value) 
							|| (this._RoomOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoomOrder.Entity = null;
						previousValue.CheckInRecord.Remove(this);
					}
					this._RoomOrder.Entity = value;
					if ((value != null))
					{
						value.CheckInRecord.Add(this);
						this._RoomOrderNo = value.RoomOrderNo;
					}
					else
					{
						this._RoomOrderNo = default(int);
					}
					this.SendPropertyChanged("RoomOrder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Coupon")]
	public partial class Coupon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CouponId;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private double _Discount;
		
		private System.DateTime _GenerateDate;
		
		private bool _isEnable;
		
		private EntitySet<RoomOrder> _RoomOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCouponIdChanging(string value);
    partial void OnCouponIdChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnDiscountChanging(double value);
    partial void OnDiscountChanged();
    partial void OnGenerateDateChanging(System.DateTime value);
    partial void OnGenerateDateChanged();
    partial void OnisEnableChanging(bool value);
    partial void OnisEnableChanged();
    #endregion
		
		public Coupon()
		{
			this._RoomOrder = new EntitySet<RoomOrder>(new Action<RoomOrder>(this.attach_RoomOrder), new Action<RoomOrder>(this.detach_RoomOrder));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CouponId", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CouponId
		{
			get
			{
				return this._CouponId;
			}
			set
			{
				if ((this._CouponId != value))
				{
					this.OnCouponIdChanging(value);
					this.SendPropertyChanging();
					this._CouponId = value;
					this.SendPropertyChanged("CouponId");
					this.OnCouponIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discount", DbType="Float NOT NULL")]
		public double Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this.OnDiscountChanging(value);
					this.SendPropertyChanging();
					this._Discount = value;
					this.SendPropertyChanged("Discount");
					this.OnDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenerateDate", DbType="Date NOT NULL")]
		public System.DateTime GenerateDate
		{
			get
			{
				return this._GenerateDate;
			}
			set
			{
				if ((this._GenerateDate != value))
				{
					this.OnGenerateDateChanging(value);
					this.SendPropertyChanging();
					this._GenerateDate = value;
					this.SendPropertyChanged("GenerateDate");
					this.OnGenerateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isEnable", DbType="Bit NOT NULL")]
		public bool isEnable
		{
			get
			{
				return this._isEnable;
			}
			set
			{
				if ((this._isEnable != value))
				{
					this.OnisEnableChanging(value);
					this.SendPropertyChanging();
					this._isEnable = value;
					this.SendPropertyChanged("isEnable");
					this.OnisEnableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Coupon_RoomOrder", Storage="_RoomOrder", ThisKey="CouponId", OtherKey="CouponId")]
		public EntitySet<RoomOrder> RoomOrder
		{
			get
			{
				return this._RoomOrder;
			}
			set
			{
				this._RoomOrder.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RoomOrder(RoomOrder entity)
		{
			this.SendPropertyChanging();
			entity.Coupon = this;
		}
		
		private void detach_RoomOrder(RoomOrder entity)
		{
			this.SendPropertyChanging();
			entity.Coupon = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DramaSchedule")]
	public partial class DramaSchedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DramaScheduleNo;
		
		private int _AttractionsNo;
		
		private System.DateTime _Date;
		
		private System.TimeSpan _ShowTime;
		
		private EntityRef<Attractions> _Attractions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDramaScheduleNoChanging(int value);
    partial void OnDramaScheduleNoChanged();
    partial void OnAttractionsNoChanging(int value);
    partial void OnAttractionsNoChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnShowTimeChanging(System.TimeSpan value);
    partial void OnShowTimeChanged();
    #endregion
		
		public DramaSchedule()
		{
			this._Attractions = default(EntityRef<Attractions>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DramaScheduleNo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DramaScheduleNo
		{
			get
			{
				return this._DramaScheduleNo;
			}
			set
			{
				if ((this._DramaScheduleNo != value))
				{
					this.OnDramaScheduleNoChanging(value);
					this.SendPropertyChanging();
					this._DramaScheduleNo = value;
					this.SendPropertyChanged("DramaScheduleNo");
					this.OnDramaScheduleNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttractionsNo", DbType="Int NOT NULL")]
		public int AttractionsNo
		{
			get
			{
				return this._AttractionsNo;
			}
			set
			{
				if ((this._AttractionsNo != value))
				{
					if (this._Attractions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttractionsNoChanging(value);
					this.SendPropertyChanging();
					this._AttractionsNo = value;
					this.SendPropertyChanged("AttractionsNo");
					this.OnAttractionsNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowTime", DbType="Time NOT NULL")]
		public System.TimeSpan ShowTime
		{
			get
			{
				return this._ShowTime;
			}
			set
			{
				if ((this._ShowTime != value))
				{
					this.OnShowTimeChanging(value);
					this.SendPropertyChanging();
					this._ShowTime = value;
					this.SendPropertyChanged("ShowTime");
					this.OnShowTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attractions_DramaSchedule", Storage="_Attractions", ThisKey="AttractionsNo", OtherKey="AttractionsNo", IsForeignKey=true)]
		public Attractions Attractions
		{
			get
			{
				return this._Attractions.Entity;
			}
			set
			{
				Attractions previousValue = this._Attractions.Entity;
				if (((previousValue != value) 
							|| (this._Attractions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Attractions.Entity = null;
						previousValue.DramaSchedule.Remove(this);
					}
					this._Attractions.Entity = value;
					if ((value != null))
					{
						value.DramaSchedule.Add(this);
						this._AttractionsNo = value.AttractionsNo;
					}
					else
					{
						this._AttractionsNo = default(int);
					}
					this.SendPropertyChanged("Attractions");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Group]")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupNo;
		
		private string _GroupName;
		
		private EntitySet<Account> _Account;
		
		private EntitySet<AuthorityDetail> _AuthorityDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupNoChanging(int value);
    partial void OnGroupNoChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    #endregion
		
		public Group()
		{
			this._Account = new EntitySet<Account>(new Action<Account>(this.attach_Account), new Action<Account>(this.detach_Account));
			this._AuthorityDetail = new EntitySet<AuthorityDetail>(new Action<AuthorityDetail>(this.attach_AuthorityDetail), new Action<AuthorityDetail>(this.detach_AuthorityDetail));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupNo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GroupNo
		{
			get
			{
				return this._GroupNo;
			}
			set
			{
				if ((this._GroupNo != value))
				{
					this.OnGroupNoChanging(value);
					this.SendPropertyChanging();
					this._GroupNo = value;
					this.SendPropertyChanged("GroupNo");
					this.OnGroupNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Account", Storage="_Account", ThisKey="GroupNo", OtherKey="GroupNo")]
		public EntitySet<Account> Account
		{
			get
			{
				return this._Account;
			}
			set
			{
				this._Account.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_AuthorityDetail", Storage="_AuthorityDetail", ThisKey="GroupNo", OtherKey="GroupNo")]
		public EntitySet<AuthorityDetail> AuthorityDetail
		{
			get
			{
				return this._AuthorityDetail;
			}
			set
			{
				this._AuthorityDetail.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Account(Account entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_Account(Account entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_AuthorityDetail(AuthorityDetail entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_AuthorityDetail(AuthorityDetail entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Guest")]
	public partial class Guest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GuestNo;
		
		private string _Name;
		
		private string _Gender;
		
		private double _Temperature;
		
		private string _Photo;
		
		private string _IdentityNo;
		
		private string _Citizenship;
		
		private bool _isVIP;
		
		private System.DateTime _RecordDateTime;
		
		private EntitySet<RoomOrder> _RoomOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGuestNoChanging(int value);
    partial void OnGuestNoChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnTemperatureChanging(double value);
    partial void OnTemperatureChanged();
    partial void OnPhotoChanging(string value);
    partial void OnPhotoChanged();
    partial void OnIdentityNoChanging(string value);
    partial void OnIdentityNoChanged();
    partial void OnCitizenshipChanging(string value);
    partial void OnCitizenshipChanged();
    partial void OnisVIPChanging(bool value);
    partial void OnisVIPChanged();
    partial void OnRecordDateTimeChanging(System.DateTime value);
    partial void OnRecordDateTimeChanged();
    #endregion
		
		public Guest()
		{
			this._RoomOrder = new EntitySet<RoomOrder>(new Action<RoomOrder>(this.attach_RoomOrder), new Action<RoomOrder>(this.detach_RoomOrder));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GuestNo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GuestNo
		{
			get
			{
				return this._GuestNo;
			}
			set
			{
				if ((this._GuestNo != value))
				{
					this.OnGuestNoChanging(value);
					this.SendPropertyChanging();
					this._GuestNo = value;
					this.SendPropertyChanged("GuestNo");
					this.OnGuestNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Temperature", DbType="Float NOT NULL")]
		public double Temperature
		{
			get
			{
				return this._Temperature;
			}
			set
			{
				if ((this._Temperature != value))
				{
					this.OnTemperatureChanging(value);
					this.SendPropertyChanging();
					this._Temperature = value;
					this.SendPropertyChanged("Temperature");
					this.OnTemperatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo", DbType="NVarChar(100)")]
		public string Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdentityNo", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string IdentityNo
		{
			get
			{
				return this._IdentityNo;
			}
			set
			{
				if ((this._IdentityNo != value))
				{
					this.OnIdentityNoChanging(value);
					this.SendPropertyChanging();
					this._IdentityNo = value;
					this.SendPropertyChanged("IdentityNo");
					this.OnIdentityNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Citizenship", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Citizenship
		{
			get
			{
				return this._Citizenship;
			}
			set
			{
				if ((this._Citizenship != value))
				{
					this.OnCitizenshipChanging(value);
					this.SendPropertyChanging();
					this._Citizenship = value;
					this.SendPropertyChanged("Citizenship");
					this.OnCitizenshipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isVIP", DbType="Bit NOT NULL")]
		public bool isVIP
		{
			get
			{
				return this._isVIP;
			}
			set
			{
				if ((this._isVIP != value))
				{
					this.OnisVIPChanging(value);
					this.SendPropertyChanging();
					this._isVIP = value;
					this.SendPropertyChanged("isVIP");
					this.OnisVIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime RecordDateTime
		{
			get
			{
				return this._RecordDateTime;
			}
			set
			{
				if ((this._RecordDateTime != value))
				{
					this.OnRecordDateTimeChanging(value);
					this.SendPropertyChanging();
					this._RecordDateTime = value;
					this.SendPropertyChanged("RecordDateTime");
					this.OnRecordDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Guest_RoomOrder", Storage="_RoomOrder", ThisKey="GuestNo", OtherKey="GuestNo")]
		public EntitySet<RoomOrder> RoomOrder
		{
			get
			{
				return this._RoomOrder;
			}
			set
			{
				this._RoomOrder.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RoomOrder(RoomOrder entity)
		{
			this.SendPropertyChanging();
			entity.Guest = this;
		}
		
		private void detach_RoomOrder(RoomOrder entity)
		{
			this.SendPropertyChanging();
			entity.Guest = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HolidayEvent")]
	public partial class HolidayEvent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HolidayEventNo;
		
		private string _HolidayEventName;
		
		private int _Year;
		
		private int _Month;
		
		private string _Note;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHolidayEventNoChanging(int value);
    partial void OnHolidayEventNoChanged();
    partial void OnHolidayEventNameChanging(string value);
    partial void OnHolidayEventNameChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnMonthChanging(int value);
    partial void OnMonthChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public HolidayEvent()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HolidayEventNo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HolidayEventNo
		{
			get
			{
				return this._HolidayEventNo;
			}
			set
			{
				if ((this._HolidayEventNo != value))
				{
					this.OnHolidayEventNoChanging(value);
					this.SendPropertyChanging();
					this._HolidayEventNo = value;
					this.SendPropertyChanged("HolidayEventNo");
					this.OnHolidayEventNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HolidayEventName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string HolidayEventName
		{
			get
			{
				return this._HolidayEventName;
			}
			set
			{
				if ((this._HolidayEventName != value))
				{
					this.OnHolidayEventNameChanging(value);
					this.SendPropertyChanging();
					this._HolidayEventName = value;
					this.SendPropertyChanged("HolidayEventName");
					this.OnHolidayEventNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int NOT NULL")]
		public int Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Month", DbType="Int NOT NULL")]
		public int Month
		{
			get
			{
				return this._Month;
			}
			set
			{
				if ((this._Month != value))
				{
					this.OnMonthChanging(value);
					this.SendPropertyChanging();
					this._Month = value;
					this.SendPropertyChanged("Month");
					this.OnMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(200)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hotel")]
	public partial class Hotel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HotelNo;
		
		private string _HotelName;
		
		private string _Feature;
		
		private string _Photo;
		
		private string _Address;
		
		private string _PhoneNumber;
		
		private EntitySet<SuitesLevel> _SuitesLevel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHotelNoChanging(int value);
    partial void OnHotelNoChanged();
    partial void OnHotelNameChanging(string value);
    partial void OnHotelNameChanged();
    partial void OnFeatureChanging(string value);
    partial void OnFeatureChanged();
    partial void OnPhotoChanging(string value);
    partial void OnPhotoChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    #endregion
		
		public Hotel()
		{
			this._SuitesLevel = new EntitySet<SuitesLevel>(new Action<SuitesLevel>(this.attach_SuitesLevel), new Action<SuitesLevel>(this.detach_SuitesLevel));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelNo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HotelNo
		{
			get
			{
				return this._HotelNo;
			}
			set
			{
				if ((this._HotelNo != value))
				{
					this.OnHotelNoChanging(value);
					this.SendPropertyChanging();
					this._HotelNo = value;
					this.SendPropertyChanged("HotelNo");
					this.OnHotelNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string HotelName
		{
			get
			{
				return this._HotelName;
			}
			set
			{
				if ((this._HotelName != value))
				{
					this.OnHotelNameChanging(value);
					this.SendPropertyChanging();
					this._HotelName = value;
					this.SendPropertyChanged("HotelName");
					this.OnHotelNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Feature", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Feature
		{
			get
			{
				return this._Feature;
			}
			set
			{
				if ((this._Feature != value))
				{
					this.OnFeatureChanging(value);
					this.SendPropertyChanging();
					this._Feature = value;
					this.SendPropertyChanged("Feature");
					this.OnFeatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo", DbType="NVarChar(100)")]
		public string Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(200)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(10)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hotel_SuitesLevel", Storage="_SuitesLevel", ThisKey="HotelNo", OtherKey="HotelNo")]
		public EntitySet<SuitesLevel> SuitesLevel
		{
			get
			{
				return this._SuitesLevel;
			}
			set
			{
				this._SuitesLevel.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SuitesLevel(SuitesLevel entity)
		{
			this.SendPropertyChanging();
			entity.Hotel = this;
		}
		
		private void detach_SuitesLevel(SuitesLevel entity)
		{
			this.SendPropertyChanging();
			entity.Hotel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LogRecord")]
	public partial class LogRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LogRecordNo;
		
		private string _AccountId;
		
		private System.Nullable<System.DateTime> _LoginTime;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLogRecordNoChanging(int value);
    partial void OnLogRecordNoChanged();
    partial void OnAccountIdChanging(string value);
    partial void OnAccountIdChanged();
    partial void OnLoginTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLoginTimeChanged();
    #endregion
		
		public LogRecord()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogRecordNo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LogRecordNo
		{
			get
			{
				return this._LogRecordNo;
			}
			set
			{
				if ((this._LogRecordNo != value))
				{
					this.OnLogRecordNoChanging(value);
					this.SendPropertyChanging();
					this._LogRecordNo = value;
					this.SendPropertyChanged("LogRecordNo");
					this.OnLogRecordNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="NVarChar(50)")]
		public string AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LoginTime
		{
			get
			{
				return this._LoginTime;
			}
			set
			{
				if ((this._LoginTime != value))
				{
					this.OnLoginTimeChanging(value);
					this.SendPropertyChanging();
					this._LoginTime = value;
					this.SendPropertyChanged("LoginTime");
					this.OnLoginTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_LogRecord", Storage="_Account", ThisKey="AccountId", OtherKey="AccountId", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.LogRecord.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.LogRecord.Add(this);
						this._AccountId = value.AccountId;
					}
					else
					{
						this._AccountId = default(string);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MaintenanceSchedule")]
	public partial class MaintenanceSchedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaintenanceScheduleNo;
		
		private int _AttractionsNo;
		
		private System.DateTime _StartDateTiime;
		
		private System.DateTime _EndDateTime;
		
		private string _Note;
		
		private EntityRef<Attractions> _Attractions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaintenanceScheduleNoChanging(int value);
    partial void OnMaintenanceScheduleNoChanged();
    partial void OnAttractionsNoChanging(int value);
    partial void OnAttractionsNoChanged();
    partial void OnStartDateTiimeChanging(System.DateTime value);
    partial void OnStartDateTiimeChanged();
    partial void OnEndDateTimeChanging(System.DateTime value);
    partial void OnEndDateTimeChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public MaintenanceSchedule()
		{
			this._Attractions = default(EntityRef<Attractions>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaintenanceScheduleNo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaintenanceScheduleNo
		{
			get
			{
				return this._MaintenanceScheduleNo;
			}
			set
			{
				if ((this._MaintenanceScheduleNo != value))
				{
					this.OnMaintenanceScheduleNoChanging(value);
					this.SendPropertyChanging();
					this._MaintenanceScheduleNo = value;
					this.SendPropertyChanged("MaintenanceScheduleNo");
					this.OnMaintenanceScheduleNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttractionsNo", DbType="Int NOT NULL")]
		public int AttractionsNo
		{
			get
			{
				return this._AttractionsNo;
			}
			set
			{
				if ((this._AttractionsNo != value))
				{
					if (this._Attractions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttractionsNoChanging(value);
					this.SendPropertyChanging();
					this._AttractionsNo = value;
					this.SendPropertyChanged("AttractionsNo");
					this.OnAttractionsNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDateTiime", DbType="DateTime NOT NULL")]
		public System.DateTime StartDateTiime
		{
			get
			{
				return this._StartDateTiime;
			}
			set
			{
				if ((this._StartDateTiime != value))
				{
					this.OnStartDateTiimeChanging(value);
					this.SendPropertyChanging();
					this._StartDateTiime = value;
					this.SendPropertyChanged("StartDateTiime");
					this.OnStartDateTiimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime EndDateTime
		{
			get
			{
				return this._EndDateTime;
			}
			set
			{
				if ((this._EndDateTime != value))
				{
					this.OnEndDateTimeChanging(value);
					this.SendPropertyChanging();
					this._EndDateTime = value;
					this.SendPropertyChanged("EndDateTime");
					this.OnEndDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(200)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attractions_MaintenanceSchedule", Storage="_Attractions", ThisKey="AttractionsNo", OtherKey="AttractionsNo", IsForeignKey=true)]
		public Attractions Attractions
		{
			get
			{
				return this._Attractions.Entity;
			}
			set
			{
				Attractions previousValue = this._Attractions.Entity;
				if (((previousValue != value) 
							|| (this._Attractions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Attractions.Entity = null;
						previousValue.MaintenanceSchedule.Remove(this);
					}
					this._Attractions.Entity = value;
					if ((value != null))
					{
						value.MaintenanceSchedule.Add(this);
						this._AttractionsNo = value.AttractionsNo;
					}
					else
					{
						this._AttractionsNo = default(int);
					}
					this.SendPropertyChanged("Attractions");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Order]")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderNo;
		
		private string _OrderId;
		
		private string _AccountId;
		
		private string _InvoiceId;
		
		private System.DateTime _PurchaseDateTime;
		
		private int _Subtotal;
		
		private int _PaymentMethodNo;
		
		private EntitySet<Ticket> _Ticket;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<PaymentMethod> _PaymentMethod;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderNoChanging(int value);
    partial void OnOrderNoChanged();
    partial void OnOrderIdChanging(string value);
    partial void OnOrderIdChanged();
    partial void OnAccountIdChanging(string value);
    partial void OnAccountIdChanged();
    partial void OnInvoiceIdChanging(string value);
    partial void OnInvoiceIdChanged();
    partial void OnPurchaseDateTimeChanging(System.DateTime value);
    partial void OnPurchaseDateTimeChanged();
    partial void OnSubtotalChanging(int value);
    partial void OnSubtotalChanged();
    partial void OnPaymentMethodNoChanging(int value);
    partial void OnPaymentMethodNoChanged();
    #endregion
		
		public Order()
		{
			this._Ticket = new EntitySet<Ticket>(new Action<Ticket>(this.attach_Ticket), new Action<Ticket>(this.detach_Ticket));
			this._Account = default(EntityRef<Account>);
			this._PaymentMethod = default(EntityRef<PaymentMethod>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderNo
		{
			get
			{
				return this._OrderNo;
			}
			set
			{
				if ((this._OrderNo != value))
				{
					this.OnOrderNoChanging(value);
					this.SendPropertyChanging();
					this._OrderNo = value;
					this.SendPropertyChanged("OrderNo");
					this.OnOrderNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="NVarChar(30)")]
		public string OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="NVarChar(50)")]
		public string AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceId", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string InvoiceId
		{
			get
			{
				return this._InvoiceId;
			}
			set
			{
				if ((this._InvoiceId != value))
				{
					this.OnInvoiceIdChanging(value);
					this.SendPropertyChanging();
					this._InvoiceId = value;
					this.SendPropertyChanged("InvoiceId");
					this.OnInvoiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchaseDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime PurchaseDateTime
		{
			get
			{
				return this._PurchaseDateTime;
			}
			set
			{
				if ((this._PurchaseDateTime != value))
				{
					this.OnPurchaseDateTimeChanging(value);
					this.SendPropertyChanging();
					this._PurchaseDateTime = value;
					this.SendPropertyChanged("PurchaseDateTime");
					this.OnPurchaseDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subtotal", DbType="Int NOT NULL")]
		public int Subtotal
		{
			get
			{
				return this._Subtotal;
			}
			set
			{
				if ((this._Subtotal != value))
				{
					this.OnSubtotalChanging(value);
					this.SendPropertyChanging();
					this._Subtotal = value;
					this.SendPropertyChanged("Subtotal");
					this.OnSubtotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentMethodNo", DbType="Int NOT NULL")]
		public int PaymentMethodNo
		{
			get
			{
				return this._PaymentMethodNo;
			}
			set
			{
				if ((this._PaymentMethodNo != value))
				{
					if (this._PaymentMethod.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentMethodNoChanging(value);
					this.SendPropertyChanging();
					this._PaymentMethodNo = value;
					this.SendPropertyChanged("PaymentMethodNo");
					this.OnPaymentMethodNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_Ticket", Storage="_Ticket", ThisKey="OrderNo", OtherKey="OrderNo")]
		public EntitySet<Ticket> Ticket
		{
			get
			{
				return this._Ticket;
			}
			set
			{
				this._Ticket.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Order", Storage="_Account", ThisKey="AccountId", OtherKey="AccountId", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Order.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Order.Add(this);
						this._AccountId = value.AccountId;
					}
					else
					{
						this._AccountId = default(string);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentMethod_Order", Storage="_PaymentMethod", ThisKey="PaymentMethodNo", OtherKey="PaymentMethodNo", IsForeignKey=true)]
		public PaymentMethod PaymentMethod
		{
			get
			{
				return this._PaymentMethod.Entity;
			}
			set
			{
				PaymentMethod previousValue = this._PaymentMethod.Entity;
				if (((previousValue != value) 
							|| (this._PaymentMethod.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaymentMethod.Entity = null;
						previousValue.Order.Remove(this);
					}
					this._PaymentMethod.Entity = value;
					if ((value != null))
					{
						value.Order.Add(this);
						this._PaymentMethodNo = value.PaymentMethodNo;
					}
					else
					{
						this._PaymentMethodNo = default(int);
					}
					this.SendPropertyChanged("PaymentMethod");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ticket(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_Ticket(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PaymentMethod")]
	public partial class PaymentMethod : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PaymentMethodNo;
		
		private string _Method;
		
		private double _Discount;
		
		private bool _isUsable;
		
		private EntitySet<Order> _Order;
		
		private EntitySet<RoomOrder> _RoomOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPaymentMethodNoChanging(int value);
    partial void OnPaymentMethodNoChanged();
    partial void OnMethodChanging(string value);
    partial void OnMethodChanged();
    partial void OnDiscountChanging(double value);
    partial void OnDiscountChanged();
    partial void OnisUsableChanging(bool value);
    partial void OnisUsableChanged();
    #endregion
		
		public PaymentMethod()
		{
			this._Order = new EntitySet<Order>(new Action<Order>(this.attach_Order), new Action<Order>(this.detach_Order));
			this._RoomOrder = new EntitySet<RoomOrder>(new Action<RoomOrder>(this.attach_RoomOrder), new Action<RoomOrder>(this.detach_RoomOrder));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentMethodNo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PaymentMethodNo
		{
			get
			{
				return this._PaymentMethodNo;
			}
			set
			{
				if ((this._PaymentMethodNo != value))
				{
					this.OnPaymentMethodNoChanging(value);
					this.SendPropertyChanging();
					this._PaymentMethodNo = value;
					this.SendPropertyChanged("PaymentMethodNo");
					this.OnPaymentMethodNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Method", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Method
		{
			get
			{
				return this._Method;
			}
			set
			{
				if ((this._Method != value))
				{
					this.OnMethodChanging(value);
					this.SendPropertyChanging();
					this._Method = value;
					this.SendPropertyChanged("Method");
					this.OnMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discount", DbType="Float NOT NULL")]
		public double Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this.OnDiscountChanging(value);
					this.SendPropertyChanging();
					this._Discount = value;
					this.SendPropertyChanged("Discount");
					this.OnDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isUsable", DbType="Bit NOT NULL")]
		public bool isUsable
		{
			get
			{
				return this._isUsable;
			}
			set
			{
				if ((this._isUsable != value))
				{
					this.OnisUsableChanging(value);
					this.SendPropertyChanging();
					this._isUsable = value;
					this.SendPropertyChanged("isUsable");
					this.OnisUsableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentMethod_Order", Storage="_Order", ThisKey="PaymentMethodNo", OtherKey="PaymentMethodNo")]
		public EntitySet<Order> Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				this._Order.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentMethod_RoomOrder", Storage="_RoomOrder", ThisKey="PaymentMethodNo", OtherKey="PaymentMethodNo")]
		public EntitySet<RoomOrder> RoomOrder
		{
			get
			{
				return this._RoomOrder;
			}
			set
			{
				this._RoomOrder.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Order(Order entity)
		{
			this.SendPropertyChanging();
			entity.PaymentMethod = this;
		}
		
		private void detach_Order(Order entity)
		{
			this.SendPropertyChanging();
			entity.PaymentMethod = null;
		}
		
		private void attach_RoomOrder(RoomOrder entity)
		{
			this.SendPropertyChanging();
			entity.PaymentMethod = this;
		}
		
		private void detach_RoomOrder(RoomOrder entity)
		{
			this.SendPropertyChanging();
			entity.PaymentMethod = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QueueRecord")]
	public partial class QueueRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QueueNo;
		
		private int _AttractionsNo;
		
		private string _TicketId;
		
		private bool _isQueue;
		
		private System.DateTime _QueueDatetime;
		
		private System.TimeSpan _QueueTime;
		
		private EntityRef<Attractions> _Attractions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQueueNoChanging(int value);
    partial void OnQueueNoChanged();
    partial void OnAttractionsNoChanging(int value);
    partial void OnAttractionsNoChanged();
    partial void OnTicketIdChanging(string value);
    partial void OnTicketIdChanged();
    partial void OnisQueueChanging(bool value);
    partial void OnisQueueChanged();
    partial void OnQueueDatetimeChanging(System.DateTime value);
    partial void OnQueueDatetimeChanged();
    partial void OnQueueTimeChanging(System.TimeSpan value);
    partial void OnQueueTimeChanged();
    #endregion
		
		public QueueRecord()
		{
			this._Attractions = default(EntityRef<Attractions>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QueueNo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QueueNo
		{
			get
			{
				return this._QueueNo;
			}
			set
			{
				if ((this._QueueNo != value))
				{
					this.OnQueueNoChanging(value);
					this.SendPropertyChanging();
					this._QueueNo = value;
					this.SendPropertyChanged("QueueNo");
					this.OnQueueNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttractionsNo", DbType="Int NOT NULL")]
		public int AttractionsNo
		{
			get
			{
				return this._AttractionsNo;
			}
			set
			{
				if ((this._AttractionsNo != value))
				{
					if (this._Attractions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttractionsNoChanging(value);
					this.SendPropertyChanging();
					this._AttractionsNo = value;
					this.SendPropertyChanged("AttractionsNo");
					this.OnAttractionsNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketId", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TicketId
		{
			get
			{
				return this._TicketId;
			}
			set
			{
				if ((this._TicketId != value))
				{
					this.OnTicketIdChanging(value);
					this.SendPropertyChanging();
					this._TicketId = value;
					this.SendPropertyChanged("TicketId");
					this.OnTicketIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isQueue", DbType="Bit NOT NULL")]
		public bool isQueue
		{
			get
			{
				return this._isQueue;
			}
			set
			{
				if ((this._isQueue != value))
				{
					this.OnisQueueChanging(value);
					this.SendPropertyChanging();
					this._isQueue = value;
					this.SendPropertyChanged("isQueue");
					this.OnisQueueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QueueDatetime", DbType="DateTime NOT NULL")]
		public System.DateTime QueueDatetime
		{
			get
			{
				return this._QueueDatetime;
			}
			set
			{
				if ((this._QueueDatetime != value))
				{
					this.OnQueueDatetimeChanging(value);
					this.SendPropertyChanging();
					this._QueueDatetime = value;
					this.SendPropertyChanged("QueueDatetime");
					this.OnQueueDatetimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QueueTime", DbType="Time NOT NULL")]
		public System.TimeSpan QueueTime
		{
			get
			{
				return this._QueueTime;
			}
			set
			{
				if ((this._QueueTime != value))
				{
					this.OnQueueTimeChanging(value);
					this.SendPropertyChanging();
					this._QueueTime = value;
					this.SendPropertyChanged("QueueTime");
					this.OnQueueTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attractions_QueueRecord", Storage="_Attractions", ThisKey="AttractionsNo", OtherKey="AttractionsNo", IsForeignKey=true)]
		public Attractions Attractions
		{
			get
			{
				return this._Attractions.Entity;
			}
			set
			{
				Attractions previousValue = this._Attractions.Entity;
				if (((previousValue != value) 
							|| (this._Attractions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Attractions.Entity = null;
						previousValue.QueueRecord.Remove(this);
					}
					this._Attractions.Entity = value;
					if ((value != null))
					{
						value.QueueRecord.Add(this);
						this._AttractionsNo = value.AttractionsNo;
					}
					else
					{
						this._AttractionsNo = default(int);
					}
					this.SendPropertyChanged("Attractions");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Room")]
	public partial class Room : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoomNo;
		
		private string _RoomId;
		
		private int _RoomSeriesNo;
		
		private int _Floor;
		
		private int _RoomStatusNo;
		
		private EntitySet<RoomAttributesDetail> _RoomAttributesDetail;
		
		private EntitySet<RoomOrderDetail> _RoomOrderDetail;
		
		private EntityRef<RoomSeries> _RoomSeries;
		
		private EntityRef<RoomStatus> _RoomStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomNoChanging(int value);
    partial void OnRoomNoChanged();
    partial void OnRoomIdChanging(string value);
    partial void OnRoomIdChanged();
    partial void OnRoomSeriesNoChanging(int value);
    partial void OnRoomSeriesNoChanged();
    partial void OnFloorChanging(int value);
    partial void OnFloorChanged();
    partial void OnRoomStatusNoChanging(int value);
    partial void OnRoomStatusNoChanged();
    #endregion
		
		public Room()
		{
			this._RoomAttributesDetail = new EntitySet<RoomAttributesDetail>(new Action<RoomAttributesDetail>(this.attach_RoomAttributesDetail), new Action<RoomAttributesDetail>(this.detach_RoomAttributesDetail));
			this._RoomOrderDetail = new EntitySet<RoomOrderDetail>(new Action<RoomOrderDetail>(this.attach_RoomOrderDetail), new Action<RoomOrderDetail>(this.detach_RoomOrderDetail));
			this._RoomSeries = default(EntityRef<RoomSeries>);
			this._RoomStatus = default(EntityRef<RoomStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomNo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoomNo
		{
			get
			{
				return this._RoomNo;
			}
			set
			{
				if ((this._RoomNo != value))
				{
					this.OnRoomNoChanging(value);
					this.SendPropertyChanging();
					this._RoomNo = value;
					this.SendPropertyChanged("RoomNo");
					this.OnRoomNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomId", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string RoomId
		{
			get
			{
				return this._RoomId;
			}
			set
			{
				if ((this._RoomId != value))
				{
					this.OnRoomIdChanging(value);
					this.SendPropertyChanging();
					this._RoomId = value;
					this.SendPropertyChanged("RoomId");
					this.OnRoomIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomSeriesNo", DbType="Int NOT NULL")]
		public int RoomSeriesNo
		{
			get
			{
				return this._RoomSeriesNo;
			}
			set
			{
				if ((this._RoomSeriesNo != value))
				{
					if (this._RoomSeries.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomSeriesNoChanging(value);
					this.SendPropertyChanging();
					this._RoomSeriesNo = value;
					this.SendPropertyChanged("RoomSeriesNo");
					this.OnRoomSeriesNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Floor", DbType="Int NOT NULL")]
		public int Floor
		{
			get
			{
				return this._Floor;
			}
			set
			{
				if ((this._Floor != value))
				{
					this.OnFloorChanging(value);
					this.SendPropertyChanging();
					this._Floor = value;
					this.SendPropertyChanged("Floor");
					this.OnFloorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomStatusNo", DbType="Int NOT NULL")]
		public int RoomStatusNo
		{
			get
			{
				return this._RoomStatusNo;
			}
			set
			{
				if ((this._RoomStatusNo != value))
				{
					if (this._RoomStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomStatusNoChanging(value);
					this.SendPropertyChanging();
					this._RoomStatusNo = value;
					this.SendPropertyChanged("RoomStatusNo");
					this.OnRoomStatusNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_RoomAttributesDetail", Storage="_RoomAttributesDetail", ThisKey="RoomNo", OtherKey="RoomNo")]
		public EntitySet<RoomAttributesDetail> RoomAttributesDetail
		{
			get
			{
				return this._RoomAttributesDetail;
			}
			set
			{
				this._RoomAttributesDetail.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_RoomOrderDetail", Storage="_RoomOrderDetail", ThisKey="RoomNo", OtherKey="RoomNo")]
		public EntitySet<RoomOrderDetail> RoomOrderDetail
		{
			get
			{
				return this._RoomOrderDetail;
			}
			set
			{
				this._RoomOrderDetail.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoomSeries_Room", Storage="_RoomSeries", ThisKey="RoomSeriesNo", OtherKey="RoomSeriesNo", IsForeignKey=true)]
		public RoomSeries RoomSeries
		{
			get
			{
				return this._RoomSeries.Entity;
			}
			set
			{
				RoomSeries previousValue = this._RoomSeries.Entity;
				if (((previousValue != value) 
							|| (this._RoomSeries.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoomSeries.Entity = null;
						previousValue.Room.Remove(this);
					}
					this._RoomSeries.Entity = value;
					if ((value != null))
					{
						value.Room.Add(this);
						this._RoomSeriesNo = value.RoomSeriesNo;
					}
					else
					{
						this._RoomSeriesNo = default(int);
					}
					this.SendPropertyChanged("RoomSeries");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoomStatus_Room", Storage="_RoomStatus", ThisKey="RoomStatusNo", OtherKey="RoomStatusNo", IsForeignKey=true)]
		public RoomStatus RoomStatus
		{
			get
			{
				return this._RoomStatus.Entity;
			}
			set
			{
				RoomStatus previousValue = this._RoomStatus.Entity;
				if (((previousValue != value) 
							|| (this._RoomStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoomStatus.Entity = null;
						previousValue.Room.Remove(this);
					}
					this._RoomStatus.Entity = value;
					if ((value != null))
					{
						value.Room.Add(this);
						this._RoomStatusNo = value.RoomStatusNo;
					}
					else
					{
						this._RoomStatusNo = default(int);
					}
					this.SendPropertyChanged("RoomStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RoomAttributesDetail(RoomAttributesDetail entity)
		{
			this.SendPropertyChanging();
			entity.Room = this;
		}
		
		private void detach_RoomAttributesDetail(RoomAttributesDetail entity)
		{
			this.SendPropertyChanging();
			entity.Room = null;
		}
		
		private void attach_RoomOrderDetail(RoomOrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Room = this;
		}
		
		private void detach_RoomOrderDetail(RoomOrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Room = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoomAttributes")]
	public partial class RoomAttributes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoomAttributesNo;
		
		private string _Attributes;
		
		private EntitySet<RoomAttributesDetail> _RoomAttributesDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomAttributesNoChanging(int value);
    partial void OnRoomAttributesNoChanged();
    partial void OnAttributesChanging(string value);
    partial void OnAttributesChanged();
    #endregion
		
		public RoomAttributes()
		{
			this._RoomAttributesDetail = new EntitySet<RoomAttributesDetail>(new Action<RoomAttributesDetail>(this.attach_RoomAttributesDetail), new Action<RoomAttributesDetail>(this.detach_RoomAttributesDetail));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomAttributesNo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoomAttributesNo
		{
			get
			{
				return this._RoomAttributesNo;
			}
			set
			{
				if ((this._RoomAttributesNo != value))
				{
					this.OnRoomAttributesNoChanging(value);
					this.SendPropertyChanging();
					this._RoomAttributesNo = value;
					this.SendPropertyChanged("RoomAttributesNo");
					this.OnRoomAttributesNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Attributes", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Attributes
		{
			get
			{
				return this._Attributes;
			}
			set
			{
				if ((this._Attributes != value))
				{
					this.OnAttributesChanging(value);
					this.SendPropertyChanging();
					this._Attributes = value;
					this.SendPropertyChanged("Attributes");
					this.OnAttributesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoomAttributes_RoomAttributesDetail", Storage="_RoomAttributesDetail", ThisKey="RoomAttributesNo", OtherKey="RoomAttributesNo")]
		public EntitySet<RoomAttributesDetail> RoomAttributesDetail
		{
			get
			{
				return this._RoomAttributesDetail;
			}
			set
			{
				this._RoomAttributesDetail.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RoomAttributesDetail(RoomAttributesDetail entity)
		{
			this.SendPropertyChanging();
			entity.RoomAttributes = this;
		}
		
		private void detach_RoomAttributesDetail(RoomAttributesDetail entity)
		{
			this.SendPropertyChanging();
			entity.RoomAttributes = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoomAttributesDetail")]
	public partial class RoomAttributesDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoomAttributesDetailNo;
		
		private int _RoomNo;
		
		private int _RoomAttributesNo;
		
		private EntityRef<Room> _Room;
		
		private EntityRef<RoomAttributes> _RoomAttributes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomAttributesDetailNoChanging(int value);
    partial void OnRoomAttributesDetailNoChanged();
    partial void OnRoomNoChanging(int value);
    partial void OnRoomNoChanged();
    partial void OnRoomAttributesNoChanging(int value);
    partial void OnRoomAttributesNoChanged();
    #endregion
		
		public RoomAttributesDetail()
		{
			this._Room = default(EntityRef<Room>);
			this._RoomAttributes = default(EntityRef<RoomAttributes>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomAttributesDetailNo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoomAttributesDetailNo
		{
			get
			{
				return this._RoomAttributesDetailNo;
			}
			set
			{
				if ((this._RoomAttributesDetailNo != value))
				{
					this.OnRoomAttributesDetailNoChanging(value);
					this.SendPropertyChanging();
					this._RoomAttributesDetailNo = value;
					this.SendPropertyChanged("RoomAttributesDetailNo");
					this.OnRoomAttributesDetailNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomNo", DbType="Int NOT NULL")]
		public int RoomNo
		{
			get
			{
				return this._RoomNo;
			}
			set
			{
				if ((this._RoomNo != value))
				{
					if (this._Room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomNoChanging(value);
					this.SendPropertyChanging();
					this._RoomNo = value;
					this.SendPropertyChanged("RoomNo");
					this.OnRoomNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomAttributesNo", DbType="Int NOT NULL")]
		public int RoomAttributesNo
		{
			get
			{
				return this._RoomAttributesNo;
			}
			set
			{
				if ((this._RoomAttributesNo != value))
				{
					if (this._RoomAttributes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomAttributesNoChanging(value);
					this.SendPropertyChanging();
					this._RoomAttributesNo = value;
					this.SendPropertyChanged("RoomAttributesNo");
					this.OnRoomAttributesNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_RoomAttributesDetail", Storage="_Room", ThisKey="RoomNo", OtherKey="RoomNo", IsForeignKey=true)]
		public Room Room
		{
			get
			{
				return this._Room.Entity;
			}
			set
			{
				Room previousValue = this._Room.Entity;
				if (((previousValue != value) 
							|| (this._Room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Room.Entity = null;
						previousValue.RoomAttributesDetail.Remove(this);
					}
					this._Room.Entity = value;
					if ((value != null))
					{
						value.RoomAttributesDetail.Add(this);
						this._RoomNo = value.RoomNo;
					}
					else
					{
						this._RoomNo = default(int);
					}
					this.SendPropertyChanged("Room");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoomAttributes_RoomAttributesDetail", Storage="_RoomAttributes", ThisKey="RoomAttributesNo", OtherKey="RoomAttributesNo", IsForeignKey=true)]
		public RoomAttributes RoomAttributes
		{
			get
			{
				return this._RoomAttributes.Entity;
			}
			set
			{
				RoomAttributes previousValue = this._RoomAttributes.Entity;
				if (((previousValue != value) 
							|| (this._RoomAttributes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoomAttributes.Entity = null;
						previousValue.RoomAttributesDetail.Remove(this);
					}
					this._RoomAttributes.Entity = value;
					if ((value != null))
					{
						value.RoomAttributesDetail.Add(this);
						this._RoomAttributesNo = value.RoomAttributesNo;
					}
					else
					{
						this._RoomAttributesNo = default(int);
					}
					this.SendPropertyChanged("RoomAttributes");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoomOrder")]
	public partial class RoomOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoomOrderNo;
		
		private System.DateTime _OrderDateTime;
		
		private int _GuestNo;
		
		private string _CouponId;
		
		private string _TicketId;
		
		private System.Nullable<int> _PaymentMethodNo;
		
		private string _InvoiceNo;
		
		private EntitySet<CheckInRecord> _CheckInRecord;
		
		private EntitySet<RoomOrderDetail> _RoomOrderDetail;
		
		private EntityRef<Coupon> _Coupon;
		
		private EntityRef<Guest> _Guest;
		
		private EntityRef<PaymentMethod> _PaymentMethod;
		
		private EntityRef<Ticket> _Ticket;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomOrderNoChanging(int value);
    partial void OnRoomOrderNoChanged();
    partial void OnOrderDateTimeChanging(System.DateTime value);
    partial void OnOrderDateTimeChanged();
    partial void OnGuestNoChanging(int value);
    partial void OnGuestNoChanged();
    partial void OnCouponIdChanging(string value);
    partial void OnCouponIdChanged();
    partial void OnTicketIdChanging(string value);
    partial void OnTicketIdChanged();
    partial void OnPaymentMethodNoChanging(System.Nullable<int> value);
    partial void OnPaymentMethodNoChanged();
    partial void OnInvoiceNoChanging(string value);
    partial void OnInvoiceNoChanged();
    #endregion
		
		public RoomOrder()
		{
			this._CheckInRecord = new EntitySet<CheckInRecord>(new Action<CheckInRecord>(this.attach_CheckInRecord), new Action<CheckInRecord>(this.detach_CheckInRecord));
			this._RoomOrderDetail = new EntitySet<RoomOrderDetail>(new Action<RoomOrderDetail>(this.attach_RoomOrderDetail), new Action<RoomOrderDetail>(this.detach_RoomOrderDetail));
			this._Coupon = default(EntityRef<Coupon>);
			this._Guest = default(EntityRef<Guest>);
			this._PaymentMethod = default(EntityRef<PaymentMethod>);
			this._Ticket = default(EntityRef<Ticket>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomOrderNo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoomOrderNo
		{
			get
			{
				return this._RoomOrderNo;
			}
			set
			{
				if ((this._RoomOrderNo != value))
				{
					this.OnRoomOrderNoChanging(value);
					this.SendPropertyChanging();
					this._RoomOrderNo = value;
					this.SendPropertyChanged("RoomOrderNo");
					this.OnRoomOrderNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime OrderDateTime
		{
			get
			{
				return this._OrderDateTime;
			}
			set
			{
				if ((this._OrderDateTime != value))
				{
					this.OnOrderDateTimeChanging(value);
					this.SendPropertyChanging();
					this._OrderDateTime = value;
					this.SendPropertyChanged("OrderDateTime");
					this.OnOrderDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GuestNo", DbType="Int NOT NULL")]
		public int GuestNo
		{
			get
			{
				return this._GuestNo;
			}
			set
			{
				if ((this._GuestNo != value))
				{
					if (this._Guest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGuestNoChanging(value);
					this.SendPropertyChanging();
					this._GuestNo = value;
					this.SendPropertyChanged("GuestNo");
					this.OnGuestNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CouponId", DbType="NVarChar(10)")]
		public string CouponId
		{
			get
			{
				return this._CouponId;
			}
			set
			{
				if ((this._CouponId != value))
				{
					if (this._Coupon.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCouponIdChanging(value);
					this.SendPropertyChanging();
					this._CouponId = value;
					this.SendPropertyChanged("CouponId");
					this.OnCouponIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketId", DbType="NVarChar(50)")]
		public string TicketId
		{
			get
			{
				return this._TicketId;
			}
			set
			{
				if ((this._TicketId != value))
				{
					if (this._Ticket.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTicketIdChanging(value);
					this.SendPropertyChanging();
					this._TicketId = value;
					this.SendPropertyChanged("TicketId");
					this.OnTicketIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentMethodNo", DbType="Int")]
		public System.Nullable<int> PaymentMethodNo
		{
			get
			{
				return this._PaymentMethodNo;
			}
			set
			{
				if ((this._PaymentMethodNo != value))
				{
					if (this._PaymentMethod.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentMethodNoChanging(value);
					this.SendPropertyChanging();
					this._PaymentMethodNo = value;
					this.SendPropertyChanged("PaymentMethodNo");
					this.OnPaymentMethodNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceNo", DbType="NVarChar(10)")]
		public string InvoiceNo
		{
			get
			{
				return this._InvoiceNo;
			}
			set
			{
				if ((this._InvoiceNo != value))
				{
					this.OnInvoiceNoChanging(value);
					this.SendPropertyChanging();
					this._InvoiceNo = value;
					this.SendPropertyChanged("InvoiceNo");
					this.OnInvoiceNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoomOrder_CheckInRecord", Storage="_CheckInRecord", ThisKey="RoomOrderNo", OtherKey="RoomOrderNo")]
		public EntitySet<CheckInRecord> CheckInRecord
		{
			get
			{
				return this._CheckInRecord;
			}
			set
			{
				this._CheckInRecord.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoomOrder_RoomOrderDetail", Storage="_RoomOrderDetail", ThisKey="RoomOrderNo", OtherKey="RoomOrderNo")]
		public EntitySet<RoomOrderDetail> RoomOrderDetail
		{
			get
			{
				return this._RoomOrderDetail;
			}
			set
			{
				this._RoomOrderDetail.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Coupon_RoomOrder", Storage="_Coupon", ThisKey="CouponId", OtherKey="CouponId", IsForeignKey=true)]
		public Coupon Coupon
		{
			get
			{
				return this._Coupon.Entity;
			}
			set
			{
				Coupon previousValue = this._Coupon.Entity;
				if (((previousValue != value) 
							|| (this._Coupon.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Coupon.Entity = null;
						previousValue.RoomOrder.Remove(this);
					}
					this._Coupon.Entity = value;
					if ((value != null))
					{
						value.RoomOrder.Add(this);
						this._CouponId = value.CouponId;
					}
					else
					{
						this._CouponId = default(string);
					}
					this.SendPropertyChanged("Coupon");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Guest_RoomOrder", Storage="_Guest", ThisKey="GuestNo", OtherKey="GuestNo", IsForeignKey=true)]
		public Guest Guest
		{
			get
			{
				return this._Guest.Entity;
			}
			set
			{
				Guest previousValue = this._Guest.Entity;
				if (((previousValue != value) 
							|| (this._Guest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Guest.Entity = null;
						previousValue.RoomOrder.Remove(this);
					}
					this._Guest.Entity = value;
					if ((value != null))
					{
						value.RoomOrder.Add(this);
						this._GuestNo = value.GuestNo;
					}
					else
					{
						this._GuestNo = default(int);
					}
					this.SendPropertyChanged("Guest");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentMethod_RoomOrder", Storage="_PaymentMethod", ThisKey="PaymentMethodNo", OtherKey="PaymentMethodNo", IsForeignKey=true)]
		public PaymentMethod PaymentMethod
		{
			get
			{
				return this._PaymentMethod.Entity;
			}
			set
			{
				PaymentMethod previousValue = this._PaymentMethod.Entity;
				if (((previousValue != value) 
							|| (this._PaymentMethod.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaymentMethod.Entity = null;
						previousValue.RoomOrder.Remove(this);
					}
					this._PaymentMethod.Entity = value;
					if ((value != null))
					{
						value.RoomOrder.Add(this);
						this._PaymentMethodNo = value.PaymentMethodNo;
					}
					else
					{
						this._PaymentMethodNo = default(Nullable<int>);
					}
					this.SendPropertyChanged("PaymentMethod");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ticket_RoomOrder", Storage="_Ticket", ThisKey="TicketId", OtherKey="TicketId", IsForeignKey=true)]
		public Ticket Ticket
		{
			get
			{
				return this._Ticket.Entity;
			}
			set
			{
				Ticket previousValue = this._Ticket.Entity;
				if (((previousValue != value) 
							|| (this._Ticket.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ticket.Entity = null;
						previousValue.RoomOrder.Remove(this);
					}
					this._Ticket.Entity = value;
					if ((value != null))
					{
						value.RoomOrder.Add(this);
						this._TicketId = value.TicketId;
					}
					else
					{
						this._TicketId = default(string);
					}
					this.SendPropertyChanged("Ticket");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CheckInRecord(CheckInRecord entity)
		{
			this.SendPropertyChanging();
			entity.RoomOrder = this;
		}
		
		private void detach_CheckInRecord(CheckInRecord entity)
		{
			this.SendPropertyChanging();
			entity.RoomOrder = null;
		}
		
		private void attach_RoomOrderDetail(RoomOrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.RoomOrder = this;
		}
		
		private void detach_RoomOrderDetail(RoomOrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.RoomOrder = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoomOrderDetail")]
	public partial class RoomOrderDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoomOrderDetailNo;
		
		private int _RoomOrderNo;
		
		private int _RoomNo;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private int _GuestNum;
		
		private int _ChildrenNum;
		
		private string _MainGuest;
		
		private string _Note;
		
		private EntitySet<RoomServiceRecord> _RoomServiceRecord;
		
		private EntityRef<Room> _Room;
		
		private EntityRef<RoomOrder> _RoomOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomOrderDetailNoChanging(int value);
    partial void OnRoomOrderDetailNoChanged();
    partial void OnRoomOrderNoChanging(int value);
    partial void OnRoomOrderNoChanged();
    partial void OnRoomNoChanging(int value);
    partial void OnRoomNoChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnGuestNumChanging(int value);
    partial void OnGuestNumChanged();
    partial void OnChildrenNumChanging(int value);
    partial void OnChildrenNumChanged();
    partial void OnMainGuestChanging(string value);
    partial void OnMainGuestChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public RoomOrderDetail()
		{
			this._RoomServiceRecord = new EntitySet<RoomServiceRecord>(new Action<RoomServiceRecord>(this.attach_RoomServiceRecord), new Action<RoomServiceRecord>(this.detach_RoomServiceRecord));
			this._Room = default(EntityRef<Room>);
			this._RoomOrder = default(EntityRef<RoomOrder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomOrderDetailNo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoomOrderDetailNo
		{
			get
			{
				return this._RoomOrderDetailNo;
			}
			set
			{
				if ((this._RoomOrderDetailNo != value))
				{
					this.OnRoomOrderDetailNoChanging(value);
					this.SendPropertyChanging();
					this._RoomOrderDetailNo = value;
					this.SendPropertyChanged("RoomOrderDetailNo");
					this.OnRoomOrderDetailNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomOrderNo", DbType="Int NOT NULL")]
		public int RoomOrderNo
		{
			get
			{
				return this._RoomOrderNo;
			}
			set
			{
				if ((this._RoomOrderNo != value))
				{
					if (this._RoomOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomOrderNoChanging(value);
					this.SendPropertyChanging();
					this._RoomOrderNo = value;
					this.SendPropertyChanged("RoomOrderNo");
					this.OnRoomOrderNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomNo", DbType="Int NOT NULL")]
		public int RoomNo
		{
			get
			{
				return this._RoomNo;
			}
			set
			{
				if ((this._RoomNo != value))
				{
					if (this._Room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomNoChanging(value);
					this.SendPropertyChanging();
					this._RoomNo = value;
					this.SendPropertyChanged("RoomNo");
					this.OnRoomNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GuestNum", DbType="Int NOT NULL")]
		public int GuestNum
		{
			get
			{
				return this._GuestNum;
			}
			set
			{
				if ((this._GuestNum != value))
				{
					this.OnGuestNumChanging(value);
					this.SendPropertyChanging();
					this._GuestNum = value;
					this.SendPropertyChanged("GuestNum");
					this.OnGuestNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChildrenNum", DbType="Int NOT NULL")]
		public int ChildrenNum
		{
			get
			{
				return this._ChildrenNum;
			}
			set
			{
				if ((this._ChildrenNum != value))
				{
					this.OnChildrenNumChanging(value);
					this.SendPropertyChanging();
					this._ChildrenNum = value;
					this.SendPropertyChanged("ChildrenNum");
					this.OnChildrenNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MainGuest", DbType="NVarChar(100)")]
		public string MainGuest
		{
			get
			{
				return this._MainGuest;
			}
			set
			{
				if ((this._MainGuest != value))
				{
					this.OnMainGuestChanging(value);
					this.SendPropertyChanging();
					this._MainGuest = value;
					this.SendPropertyChanged("MainGuest");
					this.OnMainGuestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(200)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoomOrderDetail_RoomServiceRecord", Storage="_RoomServiceRecord", ThisKey="RoomOrderDetailNo", OtherKey="RoomOrderDetailNo")]
		public EntitySet<RoomServiceRecord> RoomServiceRecord
		{
			get
			{
				return this._RoomServiceRecord;
			}
			set
			{
				this._RoomServiceRecord.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_RoomOrderDetail", Storage="_Room", ThisKey="RoomNo", OtherKey="RoomNo", IsForeignKey=true)]
		public Room Room
		{
			get
			{
				return this._Room.Entity;
			}
			set
			{
				Room previousValue = this._Room.Entity;
				if (((previousValue != value) 
							|| (this._Room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Room.Entity = null;
						previousValue.RoomOrderDetail.Remove(this);
					}
					this._Room.Entity = value;
					if ((value != null))
					{
						value.RoomOrderDetail.Add(this);
						this._RoomNo = value.RoomNo;
					}
					else
					{
						this._RoomNo = default(int);
					}
					this.SendPropertyChanged("Room");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoomOrder_RoomOrderDetail", Storage="_RoomOrder", ThisKey="RoomOrderNo", OtherKey="RoomOrderNo", IsForeignKey=true)]
		public RoomOrder RoomOrder
		{
			get
			{
				return this._RoomOrder.Entity;
			}
			set
			{
				RoomOrder previousValue = this._RoomOrder.Entity;
				if (((previousValue != value) 
							|| (this._RoomOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoomOrder.Entity = null;
						previousValue.RoomOrderDetail.Remove(this);
					}
					this._RoomOrder.Entity = value;
					if ((value != null))
					{
						value.RoomOrderDetail.Add(this);
						this._RoomOrderNo = value.RoomOrderNo;
					}
					else
					{
						this._RoomOrderNo = default(int);
					}
					this.SendPropertyChanged("RoomOrder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RoomServiceRecord(RoomServiceRecord entity)
		{
			this.SendPropertyChanging();
			entity.RoomOrderDetail = this;
		}
		
		private void detach_RoomServiceRecord(RoomServiceRecord entity)
		{
			this.SendPropertyChanging();
			entity.RoomOrderDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoomSeries")]
	public partial class RoomSeries : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoomSeriesNo;
		
		private int _SuitesLevelNo;
		
		private string _SuitesName;
		
		private string _Amenities;
		
		private int _Price;
		
		private string _Photo;
		
		private string _Feature;
		
		private int _MaximumPerson;
		
		private EntitySet<Room> _Room;
		
		private EntityRef<SuitesLevel> _SuitesLevel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomSeriesNoChanging(int value);
    partial void OnRoomSeriesNoChanged();
    partial void OnSuitesLevelNoChanging(int value);
    partial void OnSuitesLevelNoChanged();
    partial void OnSuitesNameChanging(string value);
    partial void OnSuitesNameChanged();
    partial void OnAmenitiesChanging(string value);
    partial void OnAmenitiesChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    partial void OnPhotoChanging(string value);
    partial void OnPhotoChanged();
    partial void OnFeatureChanging(string value);
    partial void OnFeatureChanged();
    partial void OnMaximumPersonChanging(int value);
    partial void OnMaximumPersonChanged();
    #endregion
		
		public RoomSeries()
		{
			this._Room = new EntitySet<Room>(new Action<Room>(this.attach_Room), new Action<Room>(this.detach_Room));
			this._SuitesLevel = default(EntityRef<SuitesLevel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomSeriesNo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoomSeriesNo
		{
			get
			{
				return this._RoomSeriesNo;
			}
			set
			{
				if ((this._RoomSeriesNo != value))
				{
					this.OnRoomSeriesNoChanging(value);
					this.SendPropertyChanging();
					this._RoomSeriesNo = value;
					this.SendPropertyChanged("RoomSeriesNo");
					this.OnRoomSeriesNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SuitesLevelNo", DbType="Int NOT NULL")]
		public int SuitesLevelNo
		{
			get
			{
				return this._SuitesLevelNo;
			}
			set
			{
				if ((this._SuitesLevelNo != value))
				{
					if (this._SuitesLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSuitesLevelNoChanging(value);
					this.SendPropertyChanging();
					this._SuitesLevelNo = value;
					this.SendPropertyChanged("SuitesLevelNo");
					this.OnSuitesLevelNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SuitesName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string SuitesName
		{
			get
			{
				return this._SuitesName;
			}
			set
			{
				if ((this._SuitesName != value))
				{
					this.OnSuitesNameChanging(value);
					this.SendPropertyChanging();
					this._SuitesName = value;
					this.SendPropertyChanged("SuitesName");
					this.OnSuitesNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amenities", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Amenities
		{
			get
			{
				return this._Amenities;
			}
			set
			{
				if ((this._Amenities != value))
				{
					this.OnAmenitiesChanging(value);
					this.SendPropertyChanging();
					this._Amenities = value;
					this.SendPropertyChanged("Amenities");
					this.OnAmenitiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo", DbType="NVarChar(100)")]
		public string Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Feature", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Feature
		{
			get
			{
				return this._Feature;
			}
			set
			{
				if ((this._Feature != value))
				{
					this.OnFeatureChanging(value);
					this.SendPropertyChanging();
					this._Feature = value;
					this.SendPropertyChanged("Feature");
					this.OnFeatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaximumPerson", DbType="Int NOT NULL")]
		public int MaximumPerson
		{
			get
			{
				return this._MaximumPerson;
			}
			set
			{
				if ((this._MaximumPerson != value))
				{
					this.OnMaximumPersonChanging(value);
					this.SendPropertyChanging();
					this._MaximumPerson = value;
					this.SendPropertyChanged("MaximumPerson");
					this.OnMaximumPersonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoomSeries_Room", Storage="_Room", ThisKey="RoomSeriesNo", OtherKey="RoomSeriesNo")]
		public EntitySet<Room> Room
		{
			get
			{
				return this._Room;
			}
			set
			{
				this._Room.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SuitesLevel_RoomSeries", Storage="_SuitesLevel", ThisKey="SuitesLevelNo", OtherKey="SuitesLevelNo", IsForeignKey=true)]
		public SuitesLevel SuitesLevel
		{
			get
			{
				return this._SuitesLevel.Entity;
			}
			set
			{
				SuitesLevel previousValue = this._SuitesLevel.Entity;
				if (((previousValue != value) 
							|| (this._SuitesLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SuitesLevel.Entity = null;
						previousValue.RoomSeries.Remove(this);
					}
					this._SuitesLevel.Entity = value;
					if ((value != null))
					{
						value.RoomSeries.Add(this);
						this._SuitesLevelNo = value.SuitesLevelNo;
					}
					else
					{
						this._SuitesLevelNo = default(int);
					}
					this.SendPropertyChanged("SuitesLevel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Room(Room entity)
		{
			this.SendPropertyChanging();
			entity.RoomSeries = this;
		}
		
		private void detach_Room(Room entity)
		{
			this.SendPropertyChanging();
			entity.RoomSeries = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoomService")]
	public partial class RoomService : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoomServiceNo;
		
		private string _ServiceName;
		
		private int _Price;
		
		private EntitySet<RoomServiceRecord> _RoomServiceRecord;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomServiceNoChanging(int value);
    partial void OnRoomServiceNoChanged();
    partial void OnServiceNameChanging(string value);
    partial void OnServiceNameChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    #endregion
		
		public RoomService()
		{
			this._RoomServiceRecord = new EntitySet<RoomServiceRecord>(new Action<RoomServiceRecord>(this.attach_RoomServiceRecord), new Action<RoomServiceRecord>(this.detach_RoomServiceRecord));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomServiceNo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoomServiceNo
		{
			get
			{
				return this._RoomServiceNo;
			}
			set
			{
				if ((this._RoomServiceNo != value))
				{
					this.OnRoomServiceNoChanging(value);
					this.SendPropertyChanging();
					this._RoomServiceNo = value;
					this.SendPropertyChanged("RoomServiceNo");
					this.OnRoomServiceNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ServiceName
		{
			get
			{
				return this._ServiceName;
			}
			set
			{
				if ((this._ServiceName != value))
				{
					this.OnServiceNameChanging(value);
					this.SendPropertyChanging();
					this._ServiceName = value;
					this.SendPropertyChanged("ServiceName");
					this.OnServiceNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoomService_RoomServiceRecord", Storage="_RoomServiceRecord", ThisKey="RoomServiceNo", OtherKey="RoomServiceNo")]
		public EntitySet<RoomServiceRecord> RoomServiceRecord
		{
			get
			{
				return this._RoomServiceRecord;
			}
			set
			{
				this._RoomServiceRecord.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RoomServiceRecord(RoomServiceRecord entity)
		{
			this.SendPropertyChanging();
			entity.RoomService = this;
		}
		
		private void detach_RoomServiceRecord(RoomServiceRecord entity)
		{
			this.SendPropertyChanging();
			entity.RoomService = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoomServiceRecord")]
	public partial class RoomServiceRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoomServiceRecordNo;
		
		private int _RoomOrderDetailNo;
		
		private int _RoomServiceNo;
		
		private int _Quantity;
		
		private EntityRef<RoomService> _RoomService;
		
		private EntityRef<RoomOrderDetail> _RoomOrderDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomServiceRecordNoChanging(int value);
    partial void OnRoomServiceRecordNoChanged();
    partial void OnRoomOrderDetailNoChanging(int value);
    partial void OnRoomOrderDetailNoChanged();
    partial void OnRoomServiceNoChanging(int value);
    partial void OnRoomServiceNoChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    #endregion
		
		public RoomServiceRecord()
		{
			this._RoomService = default(EntityRef<RoomService>);
			this._RoomOrderDetail = default(EntityRef<RoomOrderDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomServiceRecordNo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoomServiceRecordNo
		{
			get
			{
				return this._RoomServiceRecordNo;
			}
			set
			{
				if ((this._RoomServiceRecordNo != value))
				{
					this.OnRoomServiceRecordNoChanging(value);
					this.SendPropertyChanging();
					this._RoomServiceRecordNo = value;
					this.SendPropertyChanged("RoomServiceRecordNo");
					this.OnRoomServiceRecordNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomOrderDetailNo", DbType="Int NOT NULL")]
		public int RoomOrderDetailNo
		{
			get
			{
				return this._RoomOrderDetailNo;
			}
			set
			{
				if ((this._RoomOrderDetailNo != value))
				{
					if (this._RoomOrderDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomOrderDetailNoChanging(value);
					this.SendPropertyChanging();
					this._RoomOrderDetailNo = value;
					this.SendPropertyChanged("RoomOrderDetailNo");
					this.OnRoomOrderDetailNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomServiceNo", DbType="Int NOT NULL")]
		public int RoomServiceNo
		{
			get
			{
				return this._RoomServiceNo;
			}
			set
			{
				if ((this._RoomServiceNo != value))
				{
					if (this._RoomService.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomServiceNoChanging(value);
					this.SendPropertyChanging();
					this._RoomServiceNo = value;
					this.SendPropertyChanged("RoomServiceNo");
					this.OnRoomServiceNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoomService_RoomServiceRecord", Storage="_RoomService", ThisKey="RoomServiceNo", OtherKey="RoomServiceNo", IsForeignKey=true)]
		public RoomService RoomService
		{
			get
			{
				return this._RoomService.Entity;
			}
			set
			{
				RoomService previousValue = this._RoomService.Entity;
				if (((previousValue != value) 
							|| (this._RoomService.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoomService.Entity = null;
						previousValue.RoomServiceRecord.Remove(this);
					}
					this._RoomService.Entity = value;
					if ((value != null))
					{
						value.RoomServiceRecord.Add(this);
						this._RoomServiceNo = value.RoomServiceNo;
					}
					else
					{
						this._RoomServiceNo = default(int);
					}
					this.SendPropertyChanged("RoomService");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoomOrderDetail_RoomServiceRecord", Storage="_RoomOrderDetail", ThisKey="RoomOrderDetailNo", OtherKey="RoomOrderDetailNo", IsForeignKey=true)]
		public RoomOrderDetail RoomOrderDetail
		{
			get
			{
				return this._RoomOrderDetail.Entity;
			}
			set
			{
				RoomOrderDetail previousValue = this._RoomOrderDetail.Entity;
				if (((previousValue != value) 
							|| (this._RoomOrderDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoomOrderDetail.Entity = null;
						previousValue.RoomServiceRecord.Remove(this);
					}
					this._RoomOrderDetail.Entity = value;
					if ((value != null))
					{
						value.RoomServiceRecord.Add(this);
						this._RoomOrderDetailNo = value.RoomOrderDetailNo;
					}
					else
					{
						this._RoomOrderDetailNo = default(int);
					}
					this.SendPropertyChanged("RoomOrderDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoomStatus")]
	public partial class RoomStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoomStatusNo;
		
		private string _Status;
		
		private EntitySet<Room> _Room;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomStatusNoChanging(int value);
    partial void OnRoomStatusNoChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public RoomStatus()
		{
			this._Room = new EntitySet<Room>(new Action<Room>(this.attach_Room), new Action<Room>(this.detach_Room));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomStatusNo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoomStatusNo
		{
			get
			{
				return this._RoomStatusNo;
			}
			set
			{
				if ((this._RoomStatusNo != value))
				{
					this.OnRoomStatusNoChanging(value);
					this.SendPropertyChanging();
					this._RoomStatusNo = value;
					this.SendPropertyChanged("RoomStatusNo");
					this.OnRoomStatusNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoomStatus_Room", Storage="_Room", ThisKey="RoomStatusNo", OtherKey="RoomStatusNo")]
		public EntitySet<Room> Room
		{
			get
			{
				return this._Room;
			}
			set
			{
				this._Room.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Room(Room entity)
		{
			this.SendPropertyChanging();
			entity.RoomStatus = this;
		}
		
		private void detach_Room(Room entity)
		{
			this.SendPropertyChanging();
			entity.RoomStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SuitesLevel")]
	public partial class SuitesLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SuitesLevelNo;
		
		private int _HotelNo;
		
		private string _LevelName;
		
		private string _Feature;
		
		private EntitySet<RoomSeries> _RoomSeries;
		
		private EntityRef<Hotel> _Hotel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSuitesLevelNoChanging(int value);
    partial void OnSuitesLevelNoChanged();
    partial void OnHotelNoChanging(int value);
    partial void OnHotelNoChanged();
    partial void OnLevelNameChanging(string value);
    partial void OnLevelNameChanged();
    partial void OnFeatureChanging(string value);
    partial void OnFeatureChanged();
    #endregion
		
		public SuitesLevel()
		{
			this._RoomSeries = new EntitySet<RoomSeries>(new Action<RoomSeries>(this.attach_RoomSeries), new Action<RoomSeries>(this.detach_RoomSeries));
			this._Hotel = default(EntityRef<Hotel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SuitesLevelNo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SuitesLevelNo
		{
			get
			{
				return this._SuitesLevelNo;
			}
			set
			{
				if ((this._SuitesLevelNo != value))
				{
					this.OnSuitesLevelNoChanging(value);
					this.SendPropertyChanging();
					this._SuitesLevelNo = value;
					this.SendPropertyChanged("SuitesLevelNo");
					this.OnSuitesLevelNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelNo", DbType="Int NOT NULL")]
		public int HotelNo
		{
			get
			{
				return this._HotelNo;
			}
			set
			{
				if ((this._HotelNo != value))
				{
					if (this._Hotel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHotelNoChanging(value);
					this.SendPropertyChanging();
					this._HotelNo = value;
					this.SendPropertyChanged("HotelNo");
					this.OnHotelNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LevelName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string LevelName
		{
			get
			{
				return this._LevelName;
			}
			set
			{
				if ((this._LevelName != value))
				{
					this.OnLevelNameChanging(value);
					this.SendPropertyChanging();
					this._LevelName = value;
					this.SendPropertyChanged("LevelName");
					this.OnLevelNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Feature", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Feature
		{
			get
			{
				return this._Feature;
			}
			set
			{
				if ((this._Feature != value))
				{
					this.OnFeatureChanging(value);
					this.SendPropertyChanging();
					this._Feature = value;
					this.SendPropertyChanged("Feature");
					this.OnFeatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SuitesLevel_RoomSeries", Storage="_RoomSeries", ThisKey="SuitesLevelNo", OtherKey="SuitesLevelNo")]
		public EntitySet<RoomSeries> RoomSeries
		{
			get
			{
				return this._RoomSeries;
			}
			set
			{
				this._RoomSeries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hotel_SuitesLevel", Storage="_Hotel", ThisKey="HotelNo", OtherKey="HotelNo", IsForeignKey=true)]
		public Hotel Hotel
		{
			get
			{
				return this._Hotel.Entity;
			}
			set
			{
				Hotel previousValue = this._Hotel.Entity;
				if (((previousValue != value) 
							|| (this._Hotel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hotel.Entity = null;
						previousValue.SuitesLevel.Remove(this);
					}
					this._Hotel.Entity = value;
					if ((value != null))
					{
						value.SuitesLevel.Add(this);
						this._HotelNo = value.HotelNo;
					}
					else
					{
						this._HotelNo = default(int);
					}
					this.SendPropertyChanged("Hotel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RoomSeries(RoomSeries entity)
		{
			this.SendPropertyChanging();
			entity.SuitesLevel = this;
		}
		
		private void detach_RoomSeries(RoomSeries entity)
		{
			this.SendPropertyChanging();
			entity.SuitesLevel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ThemePark")]
	public partial class ThemePark : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ThemeParkNo;
		
		private string _ThemeParkName;
		
		private string _Introduction;
		
		private string _Photo;
		
		private EntitySet<Attractions> _Attractions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnThemeParkNoChanging(int value);
    partial void OnThemeParkNoChanged();
    partial void OnThemeParkNameChanging(string value);
    partial void OnThemeParkNameChanged();
    partial void OnIntroductionChanging(string value);
    partial void OnIntroductionChanged();
    partial void OnPhotoChanging(string value);
    partial void OnPhotoChanged();
    #endregion
		
		public ThemePark()
		{
			this._Attractions = new EntitySet<Attractions>(new Action<Attractions>(this.attach_Attractions), new Action<Attractions>(this.detach_Attractions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThemeParkNo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ThemeParkNo
		{
			get
			{
				return this._ThemeParkNo;
			}
			set
			{
				if ((this._ThemeParkNo != value))
				{
					this.OnThemeParkNoChanging(value);
					this.SendPropertyChanging();
					this._ThemeParkNo = value;
					this.SendPropertyChanged("ThemeParkNo");
					this.OnThemeParkNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThemeParkName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ThemeParkName
		{
			get
			{
				return this._ThemeParkName;
			}
			set
			{
				if ((this._ThemeParkName != value))
				{
					this.OnThemeParkNameChanging(value);
					this.SendPropertyChanging();
					this._ThemeParkName = value;
					this.SendPropertyChanged("ThemeParkName");
					this.OnThemeParkNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Introduction", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Introduction
		{
			get
			{
				return this._Introduction;
			}
			set
			{
				if ((this._Introduction != value))
				{
					this.OnIntroductionChanging(value);
					this.SendPropertyChanging();
					this._Introduction = value;
					this.SendPropertyChanged("Introduction");
					this.OnIntroductionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo", DbType="NVarChar(100)")]
		public string Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ThemePark_Attractions", Storage="_Attractions", ThisKey="ThemeParkNo", OtherKey="ThemeParkNo")]
		public EntitySet<Attractions> Attractions
		{
			get
			{
				return this._Attractions;
			}
			set
			{
				this._Attractions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Attractions(Attractions entity)
		{
			this.SendPropertyChanging();
			entity.ThemePark = this;
		}
		
		private void detach_Attractions(Attractions entity)
		{
			this.SendPropertyChanging();
			entity.ThemePark = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ticket")]
	public partial class Ticket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TicketId;
		
		private int _OrderNo;
		
		private int _TicketOfferNo;
		
		private string _GuestName;
		
		private System.DateTime _EffectiveDate;
		
		private System.DateTime _InvalidDate;
		
		private bool _Status;
		
		private EntitySet<RoomOrder> _RoomOrder;
		
		private EntityRef<Order> _Order;
		
		private EntityRef<TicketOffer> _TicketOffer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTicketIdChanging(string value);
    partial void OnTicketIdChanged();
    partial void OnOrderNoChanging(int value);
    partial void OnOrderNoChanged();
    partial void OnTicketOfferNoChanging(int value);
    partial void OnTicketOfferNoChanged();
    partial void OnGuestNameChanging(string value);
    partial void OnGuestNameChanged();
    partial void OnEffectiveDateChanging(System.DateTime value);
    partial void OnEffectiveDateChanged();
    partial void OnInvalidDateChanging(System.DateTime value);
    partial void OnInvalidDateChanged();
    partial void OnStatusChanging(bool value);
    partial void OnStatusChanged();
    #endregion
		
		public Ticket()
		{
			this._RoomOrder = new EntitySet<RoomOrder>(new Action<RoomOrder>(this.attach_RoomOrder), new Action<RoomOrder>(this.detach_RoomOrder));
			this._Order = default(EntityRef<Order>);
			this._TicketOffer = default(EntityRef<TicketOffer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketId", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TicketId
		{
			get
			{
				return this._TicketId;
			}
			set
			{
				if ((this._TicketId != value))
				{
					this.OnTicketIdChanging(value);
					this.SendPropertyChanging();
					this._TicketId = value;
					this.SendPropertyChanged("TicketId");
					this.OnTicketIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNo", DbType="Int NOT NULL")]
		public int OrderNo
		{
			get
			{
				return this._OrderNo;
			}
			set
			{
				if ((this._OrderNo != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderNoChanging(value);
					this.SendPropertyChanging();
					this._OrderNo = value;
					this.SendPropertyChanged("OrderNo");
					this.OnOrderNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketOfferNo", DbType="Int NOT NULL")]
		public int TicketOfferNo
		{
			get
			{
				return this._TicketOfferNo;
			}
			set
			{
				if ((this._TicketOfferNo != value))
				{
					if (this._TicketOffer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTicketOfferNoChanging(value);
					this.SendPropertyChanging();
					this._TicketOfferNo = value;
					this.SendPropertyChanged("TicketOfferNo");
					this.OnTicketOfferNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GuestName", DbType="NVarChar(100)")]
		public string GuestName
		{
			get
			{
				return this._GuestName;
			}
			set
			{
				if ((this._GuestName != value))
				{
					this.OnGuestNameChanging(value);
					this.SendPropertyChanging();
					this._GuestName = value;
					this.SendPropertyChanged("GuestName");
					this.OnGuestNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveDate", DbType="Date NOT NULL")]
		public System.DateTime EffectiveDate
		{
			get
			{
				return this._EffectiveDate;
			}
			set
			{
				if ((this._EffectiveDate != value))
				{
					this.OnEffectiveDateChanging(value);
					this.SendPropertyChanging();
					this._EffectiveDate = value;
					this.SendPropertyChanged("EffectiveDate");
					this.OnEffectiveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvalidDate", DbType="Date NOT NULL")]
		public System.DateTime InvalidDate
		{
			get
			{
				return this._InvalidDate;
			}
			set
			{
				if ((this._InvalidDate != value))
				{
					this.OnInvalidDateChanging(value);
					this.SendPropertyChanging();
					this._InvalidDate = value;
					this.SendPropertyChanged("InvalidDate");
					this.OnInvalidDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit NOT NULL")]
		public bool Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ticket_RoomOrder", Storage="_RoomOrder", ThisKey="TicketId", OtherKey="TicketId")]
		public EntitySet<RoomOrder> RoomOrder
		{
			get
			{
				return this._RoomOrder;
			}
			set
			{
				this._RoomOrder.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_Ticket", Storage="_Order", ThisKey="OrderNo", OtherKey="OrderNo", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.Ticket.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.Ticket.Add(this);
						this._OrderNo = value.OrderNo;
					}
					else
					{
						this._OrderNo = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TicketOffer_Ticket", Storage="_TicketOffer", ThisKey="TicketOfferNo", OtherKey="TicketOfferNo", IsForeignKey=true)]
		public TicketOffer TicketOffer
		{
			get
			{
				return this._TicketOffer.Entity;
			}
			set
			{
				TicketOffer previousValue = this._TicketOffer.Entity;
				if (((previousValue != value) 
							|| (this._TicketOffer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TicketOffer.Entity = null;
						previousValue.Ticket.Remove(this);
					}
					this._TicketOffer.Entity = value;
					if ((value != null))
					{
						value.Ticket.Add(this);
						this._TicketOfferNo = value.TicketOfferNo;
					}
					else
					{
						this._TicketOfferNo = default(int);
					}
					this.SendPropertyChanged("TicketOffer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RoomOrder(RoomOrder entity)
		{
			this.SendPropertyChanging();
			entity.Ticket = this;
		}
		
		private void detach_RoomOrder(RoomOrder entity)
		{
			this.SendPropertyChanging();
			entity.Ticket = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TicketOffer")]
	public partial class TicketOffer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TicketOfferNo;
		
		private string _TicketName;
		
		private int _Price;
		
		private double _Discount;
		
		private string _Photo;
		
		private string _Note;
		
		private int _ValidDay;
		
		private EntitySet<Ticket> _Ticket;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTicketOfferNoChanging(int value);
    partial void OnTicketOfferNoChanged();
    partial void OnTicketNameChanging(string value);
    partial void OnTicketNameChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    partial void OnDiscountChanging(double value);
    partial void OnDiscountChanged();
    partial void OnPhotoChanging(string value);
    partial void OnPhotoChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnValidDayChanging(int value);
    partial void OnValidDayChanged();
    #endregion
		
		public TicketOffer()
		{
			this._Ticket = new EntitySet<Ticket>(new Action<Ticket>(this.attach_Ticket), new Action<Ticket>(this.detach_Ticket));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketOfferNo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TicketOfferNo
		{
			get
			{
				return this._TicketOfferNo;
			}
			set
			{
				if ((this._TicketOfferNo != value))
				{
					this.OnTicketOfferNoChanging(value);
					this.SendPropertyChanging();
					this._TicketOfferNo = value;
					this.SendPropertyChanged("TicketOfferNo");
					this.OnTicketOfferNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string TicketName
		{
			get
			{
				return this._TicketName;
			}
			set
			{
				if ((this._TicketName != value))
				{
					this.OnTicketNameChanging(value);
					this.SendPropertyChanging();
					this._TicketName = value;
					this.SendPropertyChanged("TicketName");
					this.OnTicketNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discount", DbType="Float NOT NULL")]
		public double Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this.OnDiscountChanging(value);
					this.SendPropertyChanging();
					this._Discount = value;
					this.SendPropertyChanged("Discount");
					this.OnDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo", DbType="NVarChar(100)")]
		public string Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(200)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValidDay", DbType="Int NOT NULL")]
		public int ValidDay
		{
			get
			{
				return this._ValidDay;
			}
			set
			{
				if ((this._ValidDay != value))
				{
					this.OnValidDayChanging(value);
					this.SendPropertyChanging();
					this._ValidDay = value;
					this.SendPropertyChanged("ValidDay");
					this.OnValidDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TicketOffer_Ticket", Storage="_Ticket", ThisKey="TicketOfferNo", OtherKey="TicketOfferNo")]
		public EntitySet<Ticket> Ticket
		{
			get
			{
				return this._Ticket;
			}
			set
			{
				this._Ticket.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ticket(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.TicketOffer = this;
		}
		
		private void detach_Ticket(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.TicketOffer = null;
		}
	}
}
#pragma warning restore 1591
